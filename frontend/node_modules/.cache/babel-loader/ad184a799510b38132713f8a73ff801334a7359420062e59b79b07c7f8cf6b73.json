{"ast":null,"code":"import { eventMethodCalled } from \"../chunk-RHZEJGFD.mjs\";\nimport { getCurrentOrganizationMembership } from \"../chunk-IBXKDGSZ.mjs\";\nimport { createDeferredPromise } from \"../chunk-7QJ2QTJL.mjs\";\nimport \"../chunk-GGFRMWFO.mjs\";\nimport \"../chunk-7FNX7RWY.mjs\";\nimport { ClerkRuntimeError, isClerkAPIResponseError } from \"../chunk-IQKZKT6G.mjs\";\nimport \"../chunk-IV7BOO4U.mjs\";\nimport \"../chunk-TETGTEI2.mjs\";\nimport \"../chunk-KOH7GTJO.mjs\";\nimport \"../chunk-I6MTSTOF.mjs\";\nimport { isReverificationHint, reverificationError } from \"../chunk-43A5F2IE.mjs\";\nimport { validateReverificationConfig } from \"../chunk-3CN5LOSN.mjs\";\nimport { __export, __reExport } from \"../chunk-7ELT755Q.mjs\";\n\n// src/react/hooks/createContextAndHook.ts\nimport React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\nvar createContextAndHook = (displayName, options) => {\n  const {\n    assertCtxFn = assertContextExists\n  } = options || {};\n  const Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return ctx.value;\n  };\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n\n// src/react/contexts.tsx\nimport React2 from \"react\";\n\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n__export(clerk_swr_exports, {\n  useSWR: () => default2,\n  useSWRInfinite: () => default3\n});\n__reExport(clerk_swr_exports, swr_star);\nimport * as swr_star from \"swr\";\nimport { default as default2 } from \"swr\";\nimport { default as default3 } from \"swr/infinite\";\n\n// src/react/contexts.tsx\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar OptionsContext = React2.createContext({});\nvar [CheckoutContext, useCheckoutContext] = createContextAndHook(\"CheckoutContext\");\nvar __experimental_CheckoutProvider = ({\n  children,\n  ...rest\n}) => {\n  return /* @__PURE__ */React2.createElement(CheckoutContext.Provider, {\n    value: {\n      value: rest\n    }\n  }, children);\n};\nfunction useOptionsContext() {\n  const context = React2.useContext(OptionsContext);\n  if (context === void 0) {\n    throw new Error(\"useOptions must be used within an OptionsContext\");\n  }\n  return context;\n}\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\nvar OrganizationProvider = ({\n  children,\n  organization,\n  swrConfig\n}) => {\n  return /* @__PURE__ */React2.createElement(clerk_swr_exports.SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization\n      }\n    }\n  }, children));\n};\nfunction useAssertWrappedByClerkProvider(displayNameOrFn) {\n  const ctx = React2.useContext(ClerkInstanceContext);\n  if (!ctx) {\n    if (typeof displayNameOrFn === \"function\") {\n      displayNameOrFn();\n      return;\n    }\n    throw new Error(`${displayNameOrFn} can only be used within the <ClerkProvider /> component.\n\nPossible fixes:\n1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.\n2. Check for multiple versions of the \\`@clerk/shared\\` package in your project. Use a tool like \\`npm ls @clerk/shared\\` to identify multiple versions, and update your dependencies to only rely on one.\n\nLearn more: https://clerk.com/docs/components/clerk-provider`.trim());\n  }\n}\n\n// src/react/hooks/usePagesOrInfinite.ts\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nfunction getDifferentKeys(obj1, obj2) {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject = {};\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n  return differentKeysObject;\n}\nvar useWithSafeValues = (params, defaultValues) => {\n  const shouldUseDefaults = typeof params === \"boolean\" && params;\n  const initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage);\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n  const newObj = {};\n  for (const key of Object.keys(defaultValues)) {\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  };\n};\nvar cachingSWROptions = {\n  dedupingInterval: 1e3 * 60,\n  focusThrottleInterval: 1e3 * 60 * 2\n};\nvar usePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n  const enabled = config.enabled ?? true;\n  const cacheMode = config.__experimental_mode === \"cache\";\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n  const isSignedIn = config.isSignedIn;\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  };\n  const shouldFetch = !triggerInfinite && enabled && (!cacheMode ? !!fetcher : true);\n  const swrKey = isSignedIn ? pagesCacheKey : shouldFetch ? pagesCacheKey : null;\n  const swrFetcher = !cacheMode && !!fetcher ? cacheKeyParams => {\n    if (isSignedIn === false) {\n      return null;\n    }\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher({\n      ...params,\n      ...requestParams\n    });\n  } : null;\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate\n  } = default2(swrKey, swrFetcher, {\n    keepPreviousData,\n    ...cachingSWROptions\n  });\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate\n  } = default3(pageIndex => {\n    if (!triggerInfinite || !enabled) {\n      return null;\n    }\n    return {\n      ...params,\n      ...cacheKeys,\n      initialPage: initialPageRef.current + pageIndex,\n      pageSize: pageSizeRef.current\n    };\n  }, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher?.(requestParams);\n  }, cachingSWROptions);\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  const fetchPage = useCallback(numberOrgFn => {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  const setData = triggerInfinite ? value => swrInfiniteMutate(value, {\n    revalidate: false\n  }) : value => swrMutate(value, {\n    revalidate: false\n  });\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate,\n    // Let the hook return type define this type\n    setData\n  };\n};\n\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nfunction useOrganization(params) {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganization\");\n  const {\n    organization\n  } = useOrganizationContext();\n  const session = useSessionContext();\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false,\n    query: void 0\n  });\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(\"useOrganization\"));\n  const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role,\n    query: membersSafeValues.query\n  };\n  const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  const domains = usePagesOrInfinite({\n    ...domainParams\n  }, organization?.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization?.id\n  });\n  const membershipRequests = usePagesOrInfinite({\n    ...membershipRequestParams\n  }, organization?.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization?.id\n  });\n  const memberships = usePagesOrInfinite(membersParams || {}, organization?.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization?.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...invitationsParams\n  }, organization?.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization?.id\n  });\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations\n  };\n}\n\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nfunction useOrganizationList(params) {\n  const {\n    userMemberships,\n    userInvitations,\n    userSuggestions\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganizationList\");\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  clerk.telemetry?.record(eventMethodCalled(\"useOrganizationList\"));\n  const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  const isClerkLoaded = !!(clerk.loaded && user);\n  const memberships = usePagesOrInfinite(userMembershipsParams || {}, user?.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user?.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...userInvitationsParams\n  }, user?.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user?.id\n  });\n  const suggestions = usePagesOrInfinite({\n    ...userSuggestionsParams\n  }, user?.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user?.id\n  });\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n}\n\n// src/react/hooks/useSafeLayoutEffect.tsx\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect;\n\n// src/react/hooks/useSession.ts\nvar hookName = `useSession`;\nvar useSession = () => {\n  useAssertWrappedByClerkProvider(hookName);\n  const session = useSessionContext();\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(hookName));\n  if (session === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      session: void 0\n    };\n  }\n  if (session === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      session: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: clerk.isSignedIn,\n    session\n  };\n};\n\n// src/react/hooks/useSessionList.ts\nvar hookName2 = \"useSessionList\";\nvar useSessionList = () => {\n  useAssertWrappedByClerkProvider(hookName2);\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(hookName2));\n  if (!client) {\n    return {\n      isLoaded: false,\n      sessions: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/react/hooks/useUser.ts\nvar hookName3 = \"useUser\";\nfunction useUser() {\n  useAssertWrappedByClerkProvider(hookName3);\n  const user = useUserContext();\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(hookName3));\n  if (user === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      user: void 0\n    };\n  }\n  if (user === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      user: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    user\n  };\n}\n\n// src/react/hooks/useClerk.ts\nvar useClerk = () => {\n  useAssertWrappedByClerkProvider(\"useClerk\");\n  return useClerkInstanceContext();\n};\n\n// src/react/hooks/useDeepEqualMemo.ts\nimport { dequal as deepEqual } from \"dequal\";\nimport React4 from \"react\";\nvar useDeepEqualMemoize = value => {\n  const ref = React4.useRef(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React4.useMemo(() => ref.current, [ref.current]);\n};\nvar useDeepEqualMemo = (factory, dependencyArray) => {\n  return React4.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\nvar isDeeplyEqual = deepEqual;\n\n// src/react/hooks/useReverification.ts\nimport { useCallback as useCallback2, useRef as useRef2 } from \"react\";\nvar CLERK_API_REVERIFICATION_ERROR_CODE = \"session_reverification_required\";\nasync function resolveResult(result) {\n  try {\n    const r = await result;\n    if (r instanceof Response) {\n      return r.json();\n    }\n    return r;\n  } catch (e) {\n    if (isClerkAPIResponseError(e) && e.errors.find(({\n      code\n    }) => code === CLERK_API_REVERIFICATION_ERROR_CODE)) {\n      return reverificationError();\n    }\n    throw e;\n  }\n}\nfunction createReverificationHandler(params) {\n  function assertReverification(fetcher) {\n    return async (...args) => {\n      let result = await resolveResult(fetcher(...args));\n      if (isReverificationHint(result)) {\n        const resolvers = createDeferredPromise();\n        const isValidMetadata = validateReverificationConfig(result.clerk_error.metadata?.reverification);\n        const level = isValidMetadata ? isValidMetadata().level : void 0;\n        const cancel = () => {\n          resolvers.reject(new ClerkRuntimeError(\"User cancelled attempted verification\", {\n            code: \"reverification_cancelled\"\n          }));\n        };\n        const complete = () => {\n          resolvers.resolve(true);\n        };\n        if (params.onNeedsReverification === void 0) {\n          params.openUIComponent?.({\n            level,\n            afterVerification: complete,\n            afterVerificationCancelled: cancel\n          });\n        } else {\n          params.onNeedsReverification({\n            cancel,\n            complete,\n            level\n          });\n        }\n        await resolvers.promise;\n        result = await resolveResult(fetcher(...args));\n      }\n      return result;\n    };\n  }\n  return assertReverification;\n}\nvar useReverification = (fetcher, options) => {\n  const {\n    __internal_openReverification,\n    telemetry\n  } = useClerk();\n  const fetcherRef = useRef2(fetcher);\n  const optionsRef = useRef2(options);\n  telemetry?.record(eventMethodCalled(\"useReverification\", {\n    onNeedsReverification: Boolean(options?.onNeedsReverification)\n  }));\n  useSafeLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    optionsRef.current = options;\n  });\n  return useCallback2((...args) => {\n    const handler = createReverificationHandler({\n      openUIComponent: __internal_openReverification,\n      telemetry,\n      ...optionsRef.current\n    })(fetcherRef.current);\n    return handler(...args);\n  }, [__internal_openReverification, telemetry]);\n};\n\n// src/react/hooks/createCommerceHook.tsx\nfunction createCommercePaginatedHook({\n  hookName: hookName5,\n  resourceType,\n  useFetcher,\n  options\n}) {\n  return function useCommerceHook(params) {\n    const {\n      for: _for,\n      ...paginationParams\n    } = params || {};\n    useAssertWrappedByClerkProvider(hookName5);\n    const fetchFn = useFetcher(_for || \"user\");\n    const safeValues = useWithSafeValues(paginationParams, {\n      initialPage: 1,\n      pageSize: 10,\n      keepPreviousData: false,\n      infinite: false,\n      __experimental_mode: void 0\n    });\n    const clerk = useClerkInstanceContext();\n    const environment = clerk.__unstable__environment;\n    const user = useUserContext();\n    const {\n      organization\n    } = useOrganizationContext();\n    clerk.telemetry?.record(eventMethodCalled(hookName5));\n    const hookParams = typeof paginationParams === \"undefined\" ? void 0 : {\n      initialPage: safeValues.initialPage,\n      pageSize: safeValues.pageSize,\n      ...(_for === \"organization\" ? {\n        orgId: organization?.id\n      } : {})\n    };\n    const isOrganization = _for === \"organization\";\n    const billingEnabled = isOrganization ? environment?.commerceSettings.billing.organization.enabled : environment?.commerceSettings.billing.user.enabled;\n    const isEnabled = !!hookParams && clerk.loaded && !!billingEnabled;\n    const result = usePagesOrInfinite(hookParams || {}, fetchFn, {\n      keepPreviousData: safeValues.keepPreviousData,\n      infinite: safeValues.infinite,\n      enabled: isEnabled,\n      ...(options?.unauthenticated ? {} : {\n        isSignedIn: Boolean(user)\n      }),\n      __experimental_mode: safeValues.__experimental_mode\n    }, {\n      type: resourceType,\n      userId: user?.id,\n      ...(_for === \"organization\" ? {\n        orgId: organization?.id\n      } : {})\n    });\n    return result;\n  };\n}\n\n// src/react/hooks/useStatements.tsx\nvar useStatements = createCommercePaginatedHook({\n  hookName: \"useStatements\",\n  resourceType: \"commerce-statements\",\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    if (clerk.loaded) {\n      return clerk.billing.getStatements;\n    }\n    return void 0;\n  }\n});\n\n// src/react/hooks/usePaymentAttempts.tsx\nvar usePaymentAttempts = createCommercePaginatedHook({\n  hookName: \"usePaymentAttempts\",\n  resourceType: \"commerce-payment-attempts\",\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    if (clerk.loaded) {\n      return clerk.billing.getPaymentAttempts;\n    }\n    return void 0;\n  }\n});\n\n// src/react/hooks/usePaymentMethods.tsx\nvar usePaymentMethods = createCommercePaginatedHook({\n  hookName: \"usePaymentMethods\",\n  resourceType: \"commerce-payment-methods\",\n  useFetcher: resource => {\n    const {\n      organization\n    } = useOrganizationContext();\n    const user = useUserContext();\n    if (resource === \"organization\") {\n      return organization?.getPaymentSources;\n    }\n    return user?.getPaymentSources;\n  }\n});\n\n// src/react/hooks/usePlans.tsx\nvar usePlans = createCommercePaginatedHook({\n  hookName: \"usePlans\",\n  resourceType: \"commerce-plans\",\n  useFetcher: _for => {\n    const clerk = useClerkInstanceContext();\n    if (!clerk.loaded) {\n      return void 0;\n    }\n    return ({\n      orgId,\n      ...rest\n    }) => {\n      return clerk.billing.getPlans({\n        ...rest,\n        for: _for\n      });\n    };\n  },\n  options: {\n    unauthenticated: true\n  }\n});\n\n// src/react/hooks/useSubscription.tsx\nimport { useCallback as useCallback3 } from \"react\";\nvar hookName4 = \"useSubscription\";\nvar useSubscription = params => {\n  useAssertWrappedByClerkProvider(hookName4);\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  const {\n    organization\n  } = useOrganizationContext();\n  const environment = clerk.__unstable__environment;\n  clerk.telemetry?.record(eventMethodCalled(hookName4));\n  const isOrganization = params?.for === \"organization\";\n  const billingEnabled = isOrganization ? environment?.commerceSettings.billing.organization.enabled : environment?.commerceSettings.billing.user.enabled;\n  const swr = default2(billingEnabled ? {\n    type: \"commerce-subscription\",\n    userId: user?.id,\n    args: {\n      orgId: isOrganization ? organization?.id : void 0\n    }\n  } : null, ({\n    args,\n    userId\n  }) => {\n    if (userId) {\n      return clerk.billing.getSubscription(args);\n    }\n    return null;\n  }, {\n    dedupingInterval: 1e3 * 60,\n    keepPreviousData: params?.keepPreviousData\n  });\n  const revalidate = useCallback3(() => swr.mutate(), [swr.mutate]);\n  return {\n    data: swr.data,\n    error: swr.error,\n    isLoading: swr.isLoading,\n    isFetching: swr.isValidating,\n    revalidate\n  };\n};\n\n// src/react/hooks/useCheckout.ts\nimport { useMemo as useMemo2, useSyncExternalStore } from \"react\";\nvar useCheckout = options => {\n  const contextOptions = useCheckoutContext();\n  const {\n    for: forOrganization,\n    planId,\n    planPeriod\n  } = options || contextOptions;\n  const clerk = useClerk();\n  const {\n    organization\n  } = useOrganization();\n  const {\n    isLoaded,\n    user\n  } = useUser();\n  if (!isLoaded) {\n    throw new Error(\"Clerk: Ensure that `useCheckout` is inside a component wrapped with `<ClerkLoaded />`.\");\n  }\n  if (!user) {\n    throw new Error(\"Clerk: Ensure that `useCheckout` is inside a component wrapped with `<SignedIn />`.\");\n  }\n  if (forOrganization === \"organization\" && !organization) {\n    throw new Error(\"Clerk: Ensure your flow checks for an active organization. Retrieve `orgId` from `useAuth()` and confirm it is defined. For SSR, see: https://clerk.com/docs/references/backend/types/auth-object#how-to-access-the-auth-object\");\n  }\n  const manager = useMemo2(() => clerk.__experimental_checkout({\n    planId,\n    planPeriod,\n    for: forOrganization\n  }), [user.id, organization?.id, planId, planPeriod, forOrganization]);\n  const managerProperties = useSyncExternalStore(cb => manager.subscribe(cb), () => manager.getState(), () => manager.getState());\n  const properties = useMemo2(() => {\n    if (!managerProperties.checkout) {\n      return {\n        id: null,\n        externalClientSecret: null,\n        externalGatewayId: null,\n        status: null,\n        totals: null,\n        isImmediatePlanChange: null,\n        planPeriod: null,\n        plan: null,\n        paymentSource: null,\n        freeTrialEndsAt: null,\n        payer: null\n      };\n    }\n    const {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      reload,\n      confirm,\n      pathRoot,\n      // All the above need to be removed from the properties\n      ...rest\n    } = managerProperties.checkout;\n    return rest;\n  }, [managerProperties.checkout]);\n  const checkout = {\n    ...properties,\n    getState: manager.getState,\n    start: manager.start,\n    confirm: manager.confirm,\n    clear: manager.clear,\n    finalize: manager.finalize,\n    isStarting: managerProperties.isStarting,\n    isConfirming: managerProperties.isConfirming,\n    error: managerProperties.error,\n    status: managerProperties.status,\n    fetchStatus: managerProperties.fetchStatus\n  };\n  return {\n    checkout\n  };\n};\n\n// src/react/commerce.tsx\nimport React6, { useCallback as useCallback4, useEffect as useEffect2, useMemo as useMemo3, useState as useState3 } from \"react\";\nimport useSWR from \"swr\";\nimport useSWRMutation from \"swr/mutation\";\n\n// src/react/stripe-react/index.tsx\nimport React5, { useState as useState2 } from \"react\";\n\n// src/react/stripe-react/utils.ts\nimport { useEffect, useRef as useRef3 } from \"react\";\nvar usePrevious = value => {\n  const ref = useRef3(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\nvar useAttachEvent = (element, event, cb) => {\n  const cbDefined = !!cb;\n  const cbRef = useRef3(cb);\n  useEffect(() => {\n    cbRef.current = cb;\n  }, [cb]);\n  useEffect(() => {\n    if (!cbDefined || !element) {\n      return () => {};\n    }\n    const decoratedCb = (...args) => {\n      if (cbRef.current) {\n        cbRef.current(...args);\n      }\n    };\n    element.on(event, decoratedCb);\n    return () => {\n      element.off(event, decoratedCb);\n    };\n  }, [cbDefined, event, element, cbRef]);\n};\n\n// src/react/stripe-react/index.tsx\nvar ElementsContext = React5.createContext(null);\nElementsContext.displayName = \"ElementsContext\";\nvar parseElementsContext = (ctx, useCase) => {\n  if (!ctx) {\n    throw new Error(`Could not find Elements context; You need to wrap the part of your app that ${useCase} in an <Elements> provider.`);\n  }\n  return ctx;\n};\nvar Elements = ({\n  stripe: rawStripeProp,\n  options,\n  children\n}) => {\n  const parsed = React5.useMemo(() => parseStripeProp(rawStripeProp), [rawStripeProp]);\n  const [ctx, setContext] = React5.useState(() => ({\n    stripe: parsed.tag === \"sync\" ? parsed.stripe : null,\n    elements: parsed.tag === \"sync\" ? parsed.stripe.elements(options) : null\n  }));\n  React5.useEffect(() => {\n    let isMounted = true;\n    const safeSetContext = stripe => {\n      setContext(ctx2 => {\n        if (ctx2.stripe) {\n          return ctx2;\n        }\n        return {\n          stripe,\n          elements: stripe.elements(options)\n        };\n      });\n    };\n    if (parsed.tag === \"async\" && !ctx.stripe) {\n      parsed.stripePromise.then(stripe => {\n        if (stripe && isMounted) {\n          safeSetContext(stripe);\n        }\n      });\n    } else if (parsed.tag === \"sync\" && !ctx.stripe) {\n      safeSetContext(parsed.stripe);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [parsed, ctx, options]);\n  const prevStripe = usePrevious(rawStripeProp);\n  React5.useEffect(() => {\n    if (prevStripe !== null && prevStripe !== rawStripeProp) {\n      console.warn(\"Unsupported prop change on Elements: You cannot change the `stripe` prop after setting it.\");\n    }\n  }, [prevStripe, rawStripeProp]);\n  const prevOptions = usePrevious(options);\n  React5.useEffect(() => {\n    if (!ctx.elements) {\n      return;\n    }\n    const updates = extractAllowedOptionsUpdates(options, prevOptions, [\"clientSecret\", \"fonts\"]);\n    if (updates) {\n      ctx.elements.update(updates);\n    }\n  }, [options, prevOptions, ctx.elements]);\n  return /* @__PURE__ */React5.createElement(ElementsContext.Provider, {\n    value: ctx\n  }, children);\n};\nvar useElementsContextWithUseCase = useCaseMessage => {\n  const ctx = React5.useContext(ElementsContext);\n  return parseElementsContext(ctx, useCaseMessage);\n};\nvar useElements = () => {\n  const {\n    elements\n  } = useElementsContextWithUseCase(\"calls useElements()\");\n  return elements;\n};\nvar INVALID_STRIPE_ERROR = \"Invalid prop `stripe` supplied to `Elements`. We recommend using the `loadStripe` utility from `@stripe/stripe-js`. See https://stripe.com/docs/stripe-js/react#elements-props-stripe for details.\";\nvar validateStripe = (maybeStripe, errorMsg = INVALID_STRIPE_ERROR) => {\n  if (maybeStripe === null || isStripe(maybeStripe)) {\n    return maybeStripe;\n  }\n  throw new Error(errorMsg);\n};\nvar parseStripeProp = (raw, errorMsg = INVALID_STRIPE_ERROR) => {\n  if (isPromise(raw)) {\n    return {\n      tag: \"async\",\n      stripePromise: Promise.resolve(raw).then(result => validateStripe(result, errorMsg))\n    };\n  }\n  const stripe = validateStripe(raw, errorMsg);\n  if (stripe === null) {\n    return {\n      tag: \"empty\"\n    };\n  }\n  return {\n    tag: \"sync\",\n    stripe\n  };\n};\nvar isUnknownObject = raw => {\n  return raw !== null && typeof raw === \"object\";\n};\nvar isPromise = raw => {\n  return isUnknownObject(raw) && typeof raw.then === \"function\";\n};\nvar isStripe = raw => {\n  return isUnknownObject(raw) && typeof raw.elements === \"function\" && typeof raw.createToken === \"function\" && typeof raw.createPaymentMethod === \"function\" && typeof raw.confirmCardPayment === \"function\";\n};\nvar extractAllowedOptionsUpdates = (options, prevOptions, immutableKeys) => {\n  if (!isUnknownObject(options)) {\n    return null;\n  }\n  return Object.keys(options).reduce((newOptions, key) => {\n    const isUpdated = !isUnknownObject(prevOptions) || !isEqual(options[key], prevOptions[key]);\n    if (immutableKeys.includes(key)) {\n      if (isUpdated) {\n        console.warn(`Unsupported prop change: options.${key} is not a mutable property.`);\n      }\n      return newOptions;\n    }\n    if (!isUpdated) {\n      return newOptions;\n    }\n    return {\n      ...(newOptions || {}),\n      [key]: options[key]\n    };\n  }, null);\n};\nvar PLAIN_OBJECT_STR = \"[object Object]\";\nvar isEqual = (left, right) => {\n  if (!isUnknownObject(left) || !isUnknownObject(right)) {\n    return left === right;\n  }\n  const leftArray = Array.isArray(left);\n  const rightArray = Array.isArray(right);\n  if (leftArray !== rightArray) {\n    return false;\n  }\n  const leftPlainObject = Object.prototype.toString.call(left) === PLAIN_OBJECT_STR;\n  const rightPlainObject = Object.prototype.toString.call(right) === PLAIN_OBJECT_STR;\n  if (leftPlainObject !== rightPlainObject) {\n    return false;\n  }\n  if (!leftPlainObject && !leftArray) {\n    return left === right;\n  }\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n  if (leftKeys.length !== rightKeys.length) {\n    return false;\n  }\n  const keySet = {};\n  for (let i = 0; i < leftKeys.length; i += 1) {\n    keySet[leftKeys[i]] = true;\n  }\n  for (let i = 0; i < rightKeys.length; i += 1) {\n    keySet[rightKeys[i]] = true;\n  }\n  const allKeys = Object.keys(keySet);\n  if (allKeys.length !== leftKeys.length) {\n    return false;\n  }\n  const l = left;\n  const r = right;\n  const pred = key => {\n    return isEqual(l[key], r[key]);\n  };\n  return allKeys.every(pred);\n};\nvar useStripe = () => {\n  const {\n    stripe\n  } = useElementsOrCheckoutSdkContextWithUseCase(\"calls useStripe()\");\n  return stripe;\n};\nvar useElementsOrCheckoutSdkContextWithUseCase = useCaseString => {\n  const elementsContext = React5.useContext(ElementsContext);\n  return parseElementsContext(elementsContext, useCaseString);\n};\nvar capitalized = str => str.charAt(0).toUpperCase() + str.slice(1);\nvar createElementComponent = (type, isServer2) => {\n  const displayName = `${capitalized(type)}Element`;\n  const ClientElement = ({\n    id,\n    className,\n    fallback,\n    options = {},\n    onBlur,\n    onFocus,\n    onReady,\n    onChange,\n    onEscape,\n    onClick,\n    onLoadError,\n    onLoaderStart,\n    onNetworksChange,\n    onConfirm,\n    onCancel,\n    onShippingAddressChange,\n    onShippingRateChange\n  }) => {\n    const ctx = useElementsOrCheckoutSdkContextWithUseCase(`mounts <${displayName}>`);\n    const elements = \"elements\" in ctx ? ctx.elements : null;\n    const [element, setElement] = React5.useState(null);\n    const elementRef = React5.useRef(null);\n    const domNode = React5.useRef(null);\n    const [isReady, setReady] = useState2(false);\n    useAttachEvent(element, \"blur\", onBlur);\n    useAttachEvent(element, \"focus\", onFocus);\n    useAttachEvent(element, \"escape\", onEscape);\n    useAttachEvent(element, \"click\", onClick);\n    useAttachEvent(element, \"loaderror\", onLoadError);\n    useAttachEvent(element, \"loaderstart\", onLoaderStart);\n    useAttachEvent(element, \"networkschange\", onNetworksChange);\n    useAttachEvent(element, \"confirm\", onConfirm);\n    useAttachEvent(element, \"cancel\", onCancel);\n    useAttachEvent(element, \"shippingaddresschange\", onShippingAddressChange);\n    useAttachEvent(element, \"shippingratechange\", onShippingRateChange);\n    useAttachEvent(element, \"change\", onChange);\n    let readyCallback;\n    if (onReady) {\n      readyCallback = () => {\n        setReady(true);\n        onReady(element);\n      };\n    }\n    useAttachEvent(element, \"ready\", readyCallback);\n    React5.useLayoutEffect(() => {\n      if (elementRef.current === null && domNode.current !== null && elements) {\n        let newElement = null;\n        if (elements) {\n          newElement = elements.create(type, options);\n        }\n        elementRef.current = newElement;\n        setElement(newElement);\n        if (newElement) {\n          newElement.mount(domNode.current);\n        }\n      }\n    }, [elements, options]);\n    const prevOptions = usePrevious(options);\n    React5.useEffect(() => {\n      if (!elementRef.current) {\n        return;\n      }\n      const updates = extractAllowedOptionsUpdates(options, prevOptions, [\"paymentRequest\"]);\n      if (updates && \"update\" in elementRef.current) {\n        elementRef.current.update(updates);\n      }\n    }, [options, prevOptions]);\n    React5.useLayoutEffect(() => {\n      return () => {\n        if (elementRef.current && typeof elementRef.current.destroy === \"function\") {\n          try {\n            elementRef.current.destroy();\n            elementRef.current = null;\n          } catch {}\n        }\n      };\n    }, []);\n    return /* @__PURE__ */React5.createElement(React5.Fragment, null, !isReady && fallback, /* @__PURE__ */React5.createElement(\"div\", {\n      id,\n      style: {\n        height: isReady ? \"unset\" : \"0px\",\n        visibility: isReady ? \"visible\" : \"hidden\"\n      },\n      className,\n      ref: domNode\n    }));\n  };\n  const ServerElement = props => {\n    useElementsOrCheckoutSdkContextWithUseCase(`mounts <${displayName}>`);\n    const {\n      id,\n      className\n    } = props;\n    return /* @__PURE__ */React5.createElement(\"div\", {\n      id,\n      className\n    });\n  };\n  const Element = isServer2 ? ServerElement : ClientElement;\n  Element.displayName = displayName;\n  Element.__elementType = type;\n  return Element;\n};\nvar isServer = typeof window === \"undefined\";\nvar PaymentElement = createElementComponent(\"payment\", isServer);\n\n// src/react/commerce.tsx\nvar [StripeLibsContext, useStripeLibsContext] = createContextAndHook(\"StripeLibsContext\");\nvar StripeLibsProvider = ({\n  children\n}) => {\n  const clerk = useClerk();\n  const {\n    data: stripeClerkLibs\n  } = useSWR(\"clerk-stripe-sdk\", async () => {\n    const loadStripe = await clerk.__internal_loadStripeJs();\n    return {\n      loadStripe\n    };\n  }, {\n    keepPreviousData: true,\n    revalidateOnFocus: false,\n    dedupingInterval: Infinity\n  });\n  return /* @__PURE__ */React6.createElement(StripeLibsContext.Provider, {\n    value: {\n      value: stripeClerkLibs || null\n    }\n  }, children);\n};\nvar useInternalEnvironment = () => {\n  const clerk = useClerk();\n  return clerk.__unstable__environment;\n};\nvar usePaymentSourceUtils = (forResource = \"user\") => {\n  const {\n    organization\n  } = useOrganization();\n  const {\n    user\n  } = useUser();\n  const resource = forResource === \"organization\" ? organization : user;\n  const stripeClerkLibs = useStripeLibsContext();\n  const {\n    data: initializedPaymentSource,\n    trigger: initializePaymentSource\n  } = useSWRMutation({\n    key: \"commerce-payment-source-initialize\",\n    resourceId: resource?.id\n  }, () => {\n    return resource?.initializePaymentSource({\n      gateway: \"stripe\"\n    });\n  });\n  const environment = useInternalEnvironment();\n  useEffect2(() => {\n    if (!resource?.id) {\n      return;\n    }\n    initializePaymentSource().catch(() => {});\n  }, [resource?.id]);\n  const externalGatewayId = initializedPaymentSource?.externalGatewayId;\n  const externalClientSecret = initializedPaymentSource?.externalClientSecret;\n  const paymentMethodOrder = initializedPaymentSource?.paymentMethodOrder;\n  const stripePublishableKey = environment?.commerceSettings.billing.stripePublishableKey;\n  const {\n    data: stripe\n  } = useSWR(stripeClerkLibs && externalGatewayId && stripePublishableKey ? {\n    key: \"stripe-sdk\",\n    externalGatewayId,\n    stripePublishableKey\n  } : null, ({\n    stripePublishableKey: stripePublishableKey2,\n    externalGatewayId: externalGatewayId2\n  }) => {\n    return stripeClerkLibs?.loadStripe(stripePublishableKey2, {\n      stripeAccount: externalGatewayId2\n    });\n  }, {\n    keepPreviousData: true,\n    revalidateOnFocus: false,\n    dedupingInterval: 1e3 * 60\n    // 1 minute\n  });\n  return {\n    stripe,\n    initializePaymentSource,\n    externalClientSecret,\n    paymentMethodOrder\n  };\n};\nvar [PaymentElementContext, usePaymentElementContext] = createContextAndHook(\"PaymentElementContext\");\nvar [StripeUtilsContext, useStripeUtilsContext] = createContextAndHook(\"StripeUtilsContext\");\nvar ValidateStripeUtils = ({\n  children\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  return /* @__PURE__ */React6.createElement(StripeUtilsContext.Provider, {\n    value: {\n      value: {\n        stripe,\n        elements\n      }\n    }\n  }, children);\n};\nvar DummyStripeUtils = ({\n  children\n}) => {\n  return /* @__PURE__ */React6.createElement(StripeUtilsContext.Provider, {\n    value: {\n      value: {}\n    }\n  }, children);\n};\nvar PropsProvider = ({\n  children,\n  ...props\n}) => {\n  const utils = usePaymentSourceUtils(props.for);\n  const [isPaymentElementReady, setIsPaymentElementReady] = useState3(false);\n  return /* @__PURE__ */React6.createElement(PaymentElementContext.Provider, {\n    value: {\n      value: {\n        ...props,\n        ...utils,\n        setIsPaymentElementReady,\n        isPaymentElementReady\n      }\n    }\n  }, children);\n};\nvar PaymentElementProvider = ({\n  children,\n  ...props\n}) => {\n  return /* @__PURE__ */React6.createElement(StripeLibsProvider, null, /* @__PURE__ */React6.createElement(PropsProvider, {\n    ...props\n  }, /* @__PURE__ */React6.createElement(PaymentElementInternalRoot, null, children)));\n};\nvar PaymentElementInternalRoot = props => {\n  const {\n    stripe,\n    externalClientSecret,\n    stripeAppearance\n  } = usePaymentElementContext();\n  if (stripe && externalClientSecret) {\n    return /* @__PURE__ */React6.createElement(Elements, {\n      key: externalClientSecret,\n      stripe,\n      options: {\n        loader: \"never\",\n        clientSecret: externalClientSecret,\n        appearance: {\n          variables: stripeAppearance\n        }\n      }\n    }, /* @__PURE__ */React6.createElement(ValidateStripeUtils, null, props.children));\n  }\n  return /* @__PURE__ */React6.createElement(DummyStripeUtils, null, props.children);\n};\nvar PaymentElement2 = ({\n  fallback\n}) => {\n  const {\n    setIsPaymentElementReady,\n    paymentMethodOrder,\n    checkout,\n    stripe,\n    externalClientSecret,\n    paymentDescription,\n    for: _for\n  } = usePaymentElementContext();\n  const environment = useInternalEnvironment();\n  const applePay = useMemo3(() => {\n    if (!checkout || !checkout.totals || !checkout.plan) {\n      return void 0;\n    }\n    return {\n      recurringPaymentRequest: {\n        paymentDescription: paymentDescription || \"\",\n        managementURL: _for === \"organization\" ? environment?.displayConfig.organizationProfileUrl || \"\" : environment?.displayConfig.userProfileUrl || \"\",\n        regularBilling: {\n          amount: checkout.totals.totalDueNow?.amount || checkout.totals.grandTotal.amount,\n          label: checkout.plan.name,\n          recurringPaymentIntervalUnit: checkout.planPeriod === \"annual\" ? \"year\" : \"month\"\n        }\n      }\n    };\n  }, [checkout, paymentDescription, _for, environment]);\n  const options = useMemo3(() => {\n    return {\n      layout: {\n        type: \"tabs\",\n        defaultCollapsed: false\n      },\n      paymentMethodOrder,\n      applePay\n    };\n  }, [applePay, paymentMethodOrder]);\n  const onReady = useCallback4(() => {\n    setIsPaymentElementReady(true);\n  }, [setIsPaymentElementReady]);\n  if (!stripe || !externalClientSecret) {\n    return /* @__PURE__ */React6.createElement(React6.Fragment, null, fallback);\n  }\n  return /* @__PURE__ */React6.createElement(PaymentElement, {\n    fallback,\n    onReady,\n    options\n  });\n};\nvar throwLibsMissingError = () => {\n  throw new Error(\"Clerk: Unable to submit, Stripe libraries are not yet loaded. Be sure to check `isFormReady` before calling `submit`.\");\n};\nvar usePaymentElement = () => {\n  const {\n    isPaymentElementReady,\n    initializePaymentSource\n  } = usePaymentElementContext();\n  const {\n    stripe,\n    elements\n  } = useStripeUtilsContext();\n  const {\n    externalClientSecret\n  } = usePaymentElementContext();\n  const submit = useCallback4(async () => {\n    if (!stripe || !elements) {\n      return throwLibsMissingError();\n    }\n    const {\n      setupIntent,\n      error\n    } = await stripe.confirmSetup({\n      elements,\n      confirmParams: {\n        return_url: window.location.href\n      },\n      redirect: \"if_required\"\n    });\n    if (error) {\n      return {\n        data: null,\n        error: {\n          gateway: \"stripe\",\n          error: {\n            code: error.code,\n            message: error.message,\n            type: error.type\n          }\n        }\n      };\n    }\n    return {\n      data: {\n        gateway: \"stripe\",\n        paymentToken: setupIntent.payment_method\n      },\n      error: null\n    };\n  }, [stripe, elements]);\n  const reset = useCallback4(async () => {\n    if (!stripe || !elements) {\n      return throwLibsMissingError();\n    }\n    await initializePaymentSource();\n  }, [stripe, elements, initializePaymentSource]);\n  const isProviderReady = Boolean(stripe && externalClientSecret);\n  if (!isProviderReady) {\n    return {\n      submit: throwLibsMissingError,\n      reset: throwLibsMissingError,\n      isFormReady: false,\n      provider: void 0,\n      isProviderReady: false\n    };\n  }\n  return {\n    submit,\n    reset,\n    isFormReady: isPaymentElementReady,\n    provider: {\n      name: \"stripe\"\n    },\n    isProviderReady\n  };\n};\nexport { ClerkInstanceContext, ClientContext, OptionsContext, OrganizationProvider, SessionContext, UserContext, __experimental_CheckoutProvider, PaymentElement2 as __experimental_PaymentElement, PaymentElementProvider as __experimental_PaymentElementProvider, useCheckout as __experimental_useCheckout, usePaymentAttempts as __experimental_usePaymentAttempts, usePaymentElement as __experimental_usePaymentElement, usePaymentMethods as __experimental_usePaymentMethods, usePlans as __experimental_usePlans, useStatements as __experimental_useStatements, useSubscription as __experimental_useSubscription, assertContextExists, createContextAndHook, isDeeplyEqual, useAssertWrappedByClerkProvider, useClerk, useClerkInstanceContext, useClientContext, useDeepEqualMemo, useOptionsContext, useOrganization, useOrganizationContext, useOrganizationList, useReverification, useSafeLayoutEffect, useSession, useSessionContext, useSessionList, useUser, useUserContext };","map":{"version":3,"names":["React","assertContextExists","contextVal","msgOrCtx","Error","displayName","createContextAndHook","options","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","React2","clerk_swr_exports","__export","useSWR","default2","useSWRInfinite","default3","__reExport","swr_star","default","ClerkInstanceContext","useClerkInstanceContext","UserContext","useUserContext","ClientContext","useClientContext","SessionContext","useSessionContext","OptionsContext","CheckoutContext","useCheckoutContext","__experimental_CheckoutProvider","children","rest","createElement","Provider","useOptionsContext","context","OrganizationContextInternal","useOrganizationContext","OrganizationProvider","organization","swrConfig","SWRConfig","useAssertWrappedByClerkProvider","displayNameOrFn","trim","useCallback","useMemo","useRef","useState","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","shouldUseDefaults","initialPageRef","initialPage","pageSizeRef","pageSize","newObj","key","current","cachingSWROptions","dedupingInterval","focusThrottleInterval","usePagesOrInfinite","fetcher","config","cacheKeys","paginatedPage","setPaginatedPage","enabled","cacheMode","__experimental_mode","triggerInfinite","infinite","keepPreviousData","isSignedIn","pagesCacheKey","shouldFetch","swrKey","swrFetcher","cacheKeyParams","requestParams","data","swrData","isValidating","swrIsValidating","isLoading","swrIsLoading","error","swrError","mutate","swrMutate","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","pageIndex","page","fetchPage","numberOrgFn","map","a","flat","count","length","total_count","isFetching","isError","fetchNext","n","Math","max","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","useOrganization","domains","domainListParams","membershipRequests","membershipRequestsListParams","memberships","membersListParams","invitations","invitationsListParams","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","query","invitationsSafeValues","clerk","telemetry","record","eventMethodCalled","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","organizationId","id","getMembershipRequests","getMemberships","getInvitations","isLoaded","membership","loaded","getCurrentOrganizationMembership","user","organizationMemberships","undefinedPaginatedResource2","useOrganizationList","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","createOrganization","setActive","React3","useSafeLayoutEffect","window","useLayoutEffect","useEffect","hookName","useSession","hookName2","useSessionList","isomorphicClerk","client","sessions","hookName3","useUser","useClerk","dequal","deepEqual","React4","useDeepEqualMemoize","ref","useDeepEqualMemo","factory","dependencyArray","isDeeplyEqual","useCallback2","useRef2","CLERK_API_REVERIFICATION_ERROR_CODE","resolveResult","result","r","Response","json","e","isClerkAPIResponseError","errors","find","code","reverificationError","createReverificationHandler","assertReverification","args","isReverificationHint","resolvers","createDeferredPromise","isValidMetadata","validateReverificationConfig","clerk_error","metadata","reverification","level","cancel","reject","ClerkRuntimeError","complete","resolve","onNeedsReverification","openUIComponent","afterVerification","afterVerificationCancelled","promise","useReverification","__internal_openReverification","fetcherRef","optionsRef","Boolean","handler","createCommercePaginatedHook","hookName5","resourceType","useFetcher","useCommerceHook","for","_for","paginationParams","fetchFn","safeValues","environment","__unstable__environment","hookParams","orgId","isOrganization","billingEnabled","commerceSettings","billing","isEnabled","unauthenticated","useStatements","getStatements","usePaymentAttempts","getPaymentAttempts","usePaymentMethods","resource","getPaymentSources","usePlans","getPlans","useCallback3","hookName4","useSubscription","swr","getSubscription","useMemo2","useSyncExternalStore","useCheckout","contextOptions","forOrganization","planId","planPeriod","manager","__experimental_checkout","managerProperties","cb","subscribe","getState","properties","checkout","externalClientSecret","externalGatewayId","totals","isImmediatePlanChange","plan","paymentSource","freeTrialEndsAt","payer","reload","confirm","pathRoot","start","clear","finalize","isStarting","isConfirming","fetchStatus","React6","useCallback4","useEffect2","useMemo3","useState3","useSWRMutation","React5","useState2","useRef3","usePrevious","useAttachEvent","element","event","cbDefined","cbRef","decoratedCb","on","off","ElementsContext","parseElementsContext","useCase","Elements","stripe","rawStripeProp","parsed","parseStripeProp","setContext","tag","elements","isMounted","safeSetContext","ctx2","stripePromise","then","prevStripe","console","warn","prevOptions","updates","extractAllowedOptionsUpdates","update","useElementsContextWithUseCase","useCaseMessage","useElements","INVALID_STRIPE_ERROR","validateStripe","maybeStripe","errorMsg","isStripe","raw","isPromise","Promise","isUnknownObject","createToken","createPaymentMethod","confirmCardPayment","immutableKeys","reduce","newOptions","isUpdated","isEqual","includes","PLAIN_OBJECT_STR","left","right","leftArray","Array","isArray","rightArray","leftPlainObject","prototype","toString","call","rightPlainObject","leftKeys","rightKeys","keySet","i","allKeys","l","pred","every","useStripe","useElementsOrCheckoutSdkContextWithUseCase","useCaseString","elementsContext","capitalized","str","charAt","toUpperCase","slice","createElementComponent","isServer2","ClientElement","className","fallback","onBlur","onFocus","onReady","onChange","onEscape","onClick","onLoadError","onLoaderStart","onNetworksChange","onConfirm","onCancel","onShippingAddressChange","onShippingRateChange","setElement","elementRef","domNode","isReady","setReady","readyCallback","newElement","create","mount","destroy","Fragment","style","height","visibility","ServerElement","props","Element","__elementType","isServer","PaymentElement","StripeLibsContext","useStripeLibsContext","StripeLibsProvider","stripeClerkLibs","loadStripe","__internal_loadStripeJs","revalidateOnFocus","Infinity","useInternalEnvironment","usePaymentSourceUtils","forResource","initializedPaymentSource","trigger","initializePaymentSource","resourceId","gateway","catch","paymentMethodOrder","stripePublishableKey","stripePublishableKey2","externalGatewayId2","stripeAccount","PaymentElementContext","usePaymentElementContext","StripeUtilsContext","useStripeUtilsContext","ValidateStripeUtils","DummyStripeUtils","PropsProvider","utils","isPaymentElementReady","setIsPaymentElementReady","PaymentElementProvider","PaymentElementInternalRoot","stripeAppearance","loader","clientSecret","appearance","variables","PaymentElement2","paymentDescription","applePay","recurringPaymentRequest","managementURL","displayConfig","organizationProfileUrl","userProfileUrl","regularBilling","amount","totalDueNow","grandTotal","label","name","recurringPaymentIntervalUnit","layout","defaultCollapsed","throwLibsMissingError","usePaymentElement","submit","setupIntent","confirmSetup","confirmParams","return_url","location","href","redirect","message","paymentToken","payment_method","reset","isProviderReady","isFormReady","provider"],"sources":["D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\createContextAndHook.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\contexts.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\clerk-swr.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePagesOrInfinite.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganization.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganizationList.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSafeLayoutEffect.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSession.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSessionList.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useUser.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useClerk.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useDeepEqualMemo.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useReverification.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\createCommerceHook.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useStatements.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePaymentAttempts.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePaymentMethods.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePlans.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSubscription.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useCheckout.ts","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\commerce.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\stripe-react\\index.tsx","D:\\hidc project\\hidc project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\stripe-react\\utils.ts"],"sourcesContent":["'use client';\nimport React from 'react';\n\n/**\n * Assert that the context value exists, otherwise throw an error.\n *\n * @internal\n */\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Create and return a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n *\n * The first hook returned guarantees that the context exists so the returned value is always `CtxValue`\n * The second hook makes no guarantees, so the returned value can be `CtxValue | undefined`\n *\n * @internal\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","'use client';\n\nimport type {\n  ClerkOptions,\n  ClientResource,\n  CommerceSubscriptionPlanPeriod,\n  ForPayerType,\n  LoadedClerk,\n  OrganizationResource,\n  SignedInSessionResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<SignedInSessionResource | null | undefined>(\n  'SessionContext',\n);\n\nconst OptionsContext = React.createContext<ClerkOptions>({});\n\ntype UseCheckoutOptions = {\n  for?: ForPayerType;\n  planPeriod: CommerceSubscriptionPlanPeriod;\n  planId: string;\n};\n\nconst [CheckoutContext, useCheckoutContext] = createContextAndHook<UseCheckoutOptions>('CheckoutContext');\n\nconst __experimental_CheckoutProvider = ({ children, ...rest }: PropsWithChildren<UseCheckoutOptions>) => {\n  return <CheckoutContext.Provider value={{ value: rest }}>{children}</CheckoutContext.Provider>;\n};\n\n/**\n * @internal\n */\nfunction useOptionsContext(): ClerkOptions {\n  const context = React.useContext(OptionsContext);\n  if (context === undefined) {\n    throw new Error('useOptions must be used within an OptionsContext');\n  }\n  return context;\n}\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: { organization },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\n/**\n * @internal\n */\nfunction useAssertWrappedByClerkProvider(displayNameOrFn: string | (() => void)): void {\n  const ctx = React.useContext(ClerkInstanceContext);\n\n  if (!ctx) {\n    if (typeof displayNameOrFn === 'function') {\n      displayNameOrFn();\n      return;\n    }\n\n    throw new Error(\n      `${displayNameOrFn} can only be used within the <ClerkProvider /> component.\n\nPossible fixes:\n1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.\n2. Check for multiple versions of the \\`@clerk/shared\\` package in your project. Use a tool like \\`npm ls @clerk/shared\\` to identify multiple versions, and update your dependencies to only rely on one.\n\nLearn more: https://clerk.com/docs/components/clerk-provider`.trim(),\n    );\n  }\n}\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  OptionsContext,\n  useOptionsContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n  useCheckoutContext,\n  __experimental_CheckoutProvider,\n  useAssertWrappedByClerkProvider,\n};\n","'use client';\n\nexport * from 'swr';\n\nexport { default as useSWR } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type {\n  CacheSetter,\n  PagesOrInfiniteConfig,\n  PagesOrInfiniteOptions,\n  PaginatedResources,\n  ValueOrSetter,\n} from '../types';\n\n/**\n * Returns an object containing only the keys from the first object that are not present in the second object.\n * Useful for extracting unique parameters that should be passed to a request while excluding common cache keys.\n *\n * @internal\n *\n * @example\n * ```typescript\n * // Example 1: Basic usage\n * const obj1 = { name: 'John', age: 30, city: 'NY' };\n * const obj2 = { name: 'John', age: 30 };\n * getDifferentKeys(obj1, obj2); // Returns { city: 'NY' }\n *\n * // Example 2: With cache keys\n * const requestParams = { page: 1, limit: 10, userId: '123' };\n * const cacheKeys = { userId: '123' };\n * getDifferentKeys(requestParams, cacheKeys); // Returns { page: 1, limit: 10 }\n * ```\n */\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\n/**\n * A hook that safely merges user-provided pagination options with default values.\n * It caches initial pagination values (page and size) until component unmount to prevent unwanted rerenders.\n *\n * @internal\n *\n * @example\n * ```typescript\n * // Example 1: With user-provided options\n * const userOptions = { initialPage: 2, pageSize: 20, infinite: true };\n * const defaults = { initialPage: 1, pageSize: 10, infinite: false };\n * useWithSafeValues(userOptions, defaults);\n * // Returns { initialPage: 2, pageSize: 20, infinite: true }\n *\n * // Example 2: With boolean true (use defaults)\n * const params = true;\n * const defaults = { initialPage: 1, pageSize: 10, infinite: false };\n * useWithSafeValues(params, defaults);\n * // Returns { initialPage: 1, pageSize: 10, infinite: false }\n *\n * // Example 3: With undefined options (fallback to defaults)\n * const params = undefined;\n * const defaults = { initialPage: 1, pageSize: 10, infinite: false };\n * useWithSafeValues(params, defaults);\n * // Returns { initialPage: 1, pageSize: 10, infinite: false }\n * ```\n */\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : (params?.initialPage ?? defaultValues.initialPage),\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (params?.pageSize ?? defaultValues.pageSize));\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (params?.[key] ?? defaultValues[key]);\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\nconst cachingSWROptions = {\n  dedupingInterval: 1000 * 60,\n  focusThrottleInterval: 1000 * 60 * 2,\n} satisfies Parameters<typeof useSWR>[2];\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys extends Record<string, unknown> = Record<string, unknown>,\n  TConfig extends PagesOrInfiniteConfig = PagesOrInfiniteConfig,\n>(\n  /**\n   * The parameters will be passed to the fetcher.\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data.\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook.\n   */\n  config: TConfig,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TConfig['infinite']>;\n\n/**\n * A flexible pagination hook that supports both traditional pagination and infinite loading.\n * It provides a unified API for handling paginated data fetching, with built-in caching through SWR.\n * The hook can operate in two modes:\n * - Traditional pagination: Fetches one page at a time with page navigation\n * - Infinite loading: Accumulates data as more pages are loaded.\n *\n * Features:\n * - Cache management with SWR\n * - Loading and error states\n * - Page navigation helpers\n * - Data revalidation and updates\n * - Support for keeping previous data while loading.\n *\n * @internal\n */\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = config.enabled ?? true;\n  const cacheMode = config.__experimental_mode === 'cache';\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n  const isSignedIn = config.isSignedIn;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  // cacheMode being `true` indicates that the cache key is defined, but the fetcher is not.\n  // This allows to ready the cache instead of firing a request.\n  const shouldFetch = !triggerInfinite && enabled && (!cacheMode ? !!fetcher : true);\n  const swrKey = isSignedIn ? pagesCacheKey : shouldFetch ? pagesCacheKey : null;\n  const swrFetcher =\n    !cacheMode && !!fetcher\n      ? (cacheKeyParams: Record<string, unknown>) => {\n          if (isSignedIn === false) {\n            return null;\n          }\n          const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n          return fetcher({ ...params, ...requestParams });\n        }\n      : null;\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(swrKey, swrFetcher, { keepPreviousData, ...cachingSWROptions });\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    cachingSWROptions,\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  /**\n   * Helpers.\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","/* eslint-disable jsdoc/require-description-complete-sentence */\nimport type {\n  ClerkPaginatedResponse,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembersParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { getCurrentOrganizationMembership } from '../../organization';\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useSessionContext,\n} from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\n/**\n * @interface\n */\nexport type UseOrganizationParams = {\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   * <ul>\n   *  <li>`enrollmentMode`: A string that filters the domains by the provided [enrollment mode](https://clerk.com/docs/organizations/verified-domains#enrollment-mode).</li>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  domains?: true | PaginatedHookConfig<GetDomainsParams>;\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   * <ul>\n   *  <li>`status`: A string that filters the membership requests by the provided status.</li>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  membershipRequests?: true | PaginatedHookConfig<GetMembershipRequestParams>;\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   * <ul>\n   *  <li>`role`: An array of [`OrganizationCustomRoleKey`](https://clerk.com/docs/references/javascript/types/organization-custom-role-key).</li>\n   *  <li>`query`: A string that filters the memberships by the provided string.</li>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  memberships?: true | PaginatedHookConfig<GetMembersParams>;\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   * <ul>\n   *  <li>`status`: A string that filters the invitations by the provided status.</li>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  invitations?: true | PaginatedHookConfig<GetInvitationsParams>;\n};\n\n/**\n * @interface\n */\nexport type UseOrganizationReturn<T extends UseOrganizationParams> =\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.\n       */\n      isLoaded: false;\n      /**\n       * The currently active organization.\n       */\n      organization: undefined;\n      /**\n       * The current organization membership.\n       */\n      membership: undefined;\n      /**\n       * Includes a paginated list of the organization's domains.\n       */\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      /**\n       * Includes a paginated list of the organization's membership requests.\n       */\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      /**\n       * Includes a paginated list of the organization's memberships.\n       */\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      /**\n       * Includes a paginated list of the organization's invitations.\n       */\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\n/**\n * The `useOrganization()` hook retrieves attributes of the currently active organization.\n *\n * @example\n * ### Expand and paginate attributes\n *\n * To keep network usage to a minimum, developers are required to opt-in by specifying which resource they need to fetch and paginate through. By default, the `memberships`, `invitations`, `membershipRequests`, and `domains` attributes are not populated. You must pass `true` or an object with the desired properties to fetch and paginate the data.\n *\n * ```tsx\n * // invitations.data will never be populated.\n * const { invitations } = useOrganization()\n *\n * // Use default values to fetch invitations, such as initialPage = 1 and pageSize = 10\n * const { invitations } = useOrganization({\n *   invitations: true,\n * })\n *\n * // Pass your own values to fetch invitations\n * const { invitations } = useOrganization({\n *   invitations: {\n *     pageSize: 20,\n *     initialPage: 2, // skips the first page\n *   },\n * })\n *\n * // Aggregate pages in order to render an infinite list\n * const { invitations } = useOrganization({\n *   invitations: {\n *     infinite: true,\n *   },\n * })\n * ```\n *\n * @example\n * ### Infinite pagination\n *\n * The following example demonstrates how to use the `infinite` property to fetch and append new data to the existing list. The `memberships` attribute will be populated with the first page of the organization's memberships. When the \"Load more\" button is clicked, the `fetchNext` helper function will be called to append the next page of memberships to the list.\n *\n * ```tsx\n * import { useOrganization } from '@clerk/clerk-react'\n *\n * export default function MemberList() {\n *   const { memberships } = useOrganization({\n *     memberships: {\n *       infinite: true, // Append new data to the existing list\n *       keepPreviousData: true, // Persist the cached data until the new data has been fetched\n *     },\n *   })\n *\n *   if (!memberships) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   return (\n *     <div>\n *       <h2>Organization members</h2>\n *       <ul>\n *         {memberships.data?.map((membership) => (\n *           <li key={membership.id}>\n *             {membership.publicUserData.firstName} {membership.publicUserData.lastName} <\n *             {membership.publicUserData.identifier}> :: {membership.role}\n *           </li>\n *         ))}\n *       </ul>\n *\n *       <button\n *         disabled={!memberships.hasNextPage} // Disable the button if there are no more available pages to be fetched\n *         onClick={memberships.fetchNext}\n *       >\n *         Load more\n *       </button>\n *     </div>\n *   )\n * }\n * ```\n *\n * @example\n * ### Simple pagination\n *\n * The following example demonstrates how to use the `fetchPrevious` and `fetchNext` helper functions to paginate through the data. The `memberships` attribute will be populated with the first page of the organization's memberships. When the \"Previous page\" or \"Next page\" button is clicked, the `fetchPrevious` or `fetchNext` helper function will be called to fetch the previous or next page of memberships.\n *\n * Notice the difference between this example's pagination and the infinite pagination example above.\n *\n * ```tsx\n * import { useOrganization } from '@clerk/clerk-react'\n *\n * export default function MemberList() {\n *   const { memberships } = useOrganization({\n *     memberships: {\n *       keepPreviousData: true, // Persist the cached data until the new data has been fetched\n *     },\n *   })\n *\n *   if (!memberships) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   return (\n *     <div>\n *       <h2>Organization members</h2>\n *       <ul>\n *         {memberships.data?.map((membership) => (\n *           <li key={membership.id}>\n *             {membership.publicUserData.firstName} {membership.publicUserData.lastName} <\n *             {membership.publicUserData.identifier}> :: {membership.role}\n *           </li>\n *         ))}\n *       </ul>\n *\n *       <button disabled={!memberships.hasPreviousPage} onClick={memberships.fetchPrevious}>\n *         Previous page\n *       </button>\n *\n *       <button disabled={!memberships.hasNextPage} onClick={memberships.fetchNext}>\n *         Next page\n *       </button>\n *     </div>\n *   )\n * }\n * ```\n */\nexport function useOrganization<T extends UseOrganizationParams>(params?: T): UseOrganizationReturn<T> {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganization');\n\n  const { organization } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n    query: undefined,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganization'));\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n          query: membersSafeValues.query,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    membersParams || {},\n    organization?.getMemberships,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n}\n","/* eslint-disable jsdoc/require-description-complete-sentence */\nimport type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\n/**\n * @interface\n */\nexport type UseOrganizationListParams = {\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   *\n   * <ul>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  userMemberships?: true | PaginatedHookConfig<GetUserOrganizationMembershipParams>;\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   *\n   * <ul>\n   *  <li>`status`: A string that filters the invitations by the provided status.</li>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  userInvitations?: true | PaginatedHookConfig<GetUserOrganizationInvitationsParams>;\n  /**\n   * If set to `true`, all default properties will be used.<br />\n   * Otherwise, accepts an object with the following optional properties:\n   *\n   * <ul>\n   *  <li>`status`: A string that filters the suggestions by the provided status.</li>\n   *  <li>Any of the properties described in [Shared properties](#shared-properties).</li>\n   * </ul>\n   */\n  userSuggestions?: true | PaginatedHookConfig<GetUserOrganizationSuggestionsParams>;\n};\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\n/**\n * @interface\n */\nexport type UseOrganizationListReturn<T extends UseOrganizationListParams> =\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization and there is an authenticated user. Initially `false`, becomes `true` once Clerk loads with a user.\n       */\n      isLoaded: false;\n      /**\n       * A function that returns a `Promise` which resolves to the newly created `Organization`.\n       */\n      createOrganization: undefined;\n      /**\n       * A function that sets the active session and/or organization.\n       */\n      setActive: undefined;\n      /**\n       * Returns `PaginatedResources` which includes a list of the user's organization memberships.\n       */\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      /**\n       * Returns `PaginatedResources` which includes a list of the user's organization invitations.\n       */\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      /**\n       * Returns `PaginatedResources` which includes a list of suggestions for organizations that the user can join.\n       */\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      isLoaded: boolean;\n      createOrganization: (CreateOrganizationParams: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\n/**\n * The `useOrganizationList()` hook provides access to the current user's organization memberships, invitations, and suggestions. It also includes methods for creating new organizations and managing the active organization.\n *\n * @example\n * ### Expanding and paginating attributes\n *\n * To keep network usage to a minimum, developers are required to opt-in by specifying which resource they need to fetch and paginate through. So by default, the `userMemberships`, `userInvitations`, and `userSuggestions` attributes are not populated. You must pass true or an object with the desired properties to fetch and paginate the data.\n *\n * ```tsx\n * // userMemberships.data will never be populated\n * const { userMemberships } = useOrganizationList()\n *\n * // Use default values to fetch userMemberships, such as initialPage = 1 and pageSize = 10\n * const { userMemberships } = useOrganizationList({\n *   userMemberships: true,\n * })\n *\n * // Pass your own values to fetch userMemberships\n * const { userMemberships } = useOrganizationList({\n *   userMemberships: {\n *     pageSize: 20,\n *     initialPage: 2, // skips the first page\n *   },\n * })\n *\n * // Aggregate pages in order to render an infinite list\n * const { userMemberships } = useOrganizationList({\n *   userMemberships: {\n *     infinite: true,\n *   },\n * })\n * ```\n *\n * @example\n * ### Infinite pagination\n *\n * The following example demonstrates how to use the `infinite` property to fetch and append new data to the existing list. The `userMemberships` attribute will be populated with the first page of the user's organization memberships. When the \"Load more\" button is clicked, the `fetchNext` helper function will be called to append the next page of memberships to the list.\n *\n * ```tsx {{ filename: 'src/components/JoinedOrganizations.tsx' }}\n * import { useOrganizationList } from '@clerk/clerk-react'\n * import React from 'react'\n *\n * const JoinedOrganizations = () => {\n *   const { isLoaded, setActive, userMemberships } = useOrganizationList({\n *     userMemberships: {\n *       infinite: true,\n *     },\n *   })\n *\n *   if (!isLoaded) {\n *     return <>Loading</>\n *   }\n *\n *   return (\n *     <>\n *       <ul>\n *         {userMemberships.data?.map((mem) => (\n *           <li key={mem.id}>\n *             <span>{mem.organization.name}</span>\n *             <button onClick={() => setActive({ organization: mem.organization.id })}>Select</button>\n *           </li>\n *         ))}\n *       </ul>\n *\n *       <button disabled={!userMemberships.hasNextPage} onClick={() => userMemberships.fetchNext()}>\n *         Load more\n *       </button>\n *     </>\n *   )\n * }\n *\n * export default JoinedOrganizations\n * ```\n *\n * @example\n * ### Simple pagination\n *\n * The following example demonstrates how to use the `fetchPrevious` and `fetchNext` helper functions to paginate through the data. The `userInvitations` attribute will be populated with the first page of invitations. When the \"Previous page\" or \"Next page\" button is clicked, the `fetchPrevious` or `fetchNext` helper function will be called to fetch the previous or next page of invitations.\n *\n * Notice the difference between this example's pagination and the infinite pagination example above.\n *\n * ```tsx {{ filename: 'src/components/UserInvitationsTable.tsx' }}\n * import { useOrganizationList } from '@clerk/clerk-react'\n * import React from 'react'\n *\n * const UserInvitationsTable = () => {\n *   const { isLoaded, userInvitations } = useOrganizationList({\n *     userInvitations: {\n *       infinite: true,\n *       keepPreviousData: true,\n *     },\n *   })\n *\n *   if (!isLoaded || userInvitations.isLoading) {\n *     return <>Loading</>\n *   }\n *\n *   return (\n *     <>\n *       <table>\n *         <thead>\n *           <tr>\n *             <th>Email</th>\n *             <th>Org name</th>\n *           </tr>\n *         </thead>\n *\n *         <tbody>\n *           {userInvitations.data?.map((inv) => (\n *             <tr key={inv.id}>\n *               <th>{inv.emailAddress}</th>\n *               <th>{inv.publicOrganizationData.name}</th>\n *             </tr>\n *           ))}\n *         </tbody>\n *       </table>\n *\n *       <button disabled={!userInvitations.hasPreviousPage} onClick={userInvitations.fetchPrevious}>\n *         Prev\n *       </button>\n *       <button disabled={!userInvitations.hasNextPage} onClick={userInvitations.fetchNext}>\n *         Next\n *       </button>\n *     </>\n *   )\n * }\n *\n * export default UserInvitationsTable\n * ```\n */\nexport function useOrganizationList<T extends UseOrganizationListParams>(params?: T): UseOrganizationListReturn<T> {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganizationList');\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganizationList'));\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    userMembershipsParams || {},\n    user?.getOrganizationMemberships,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n}\n","import React from 'react';\n\n/**\n * @internal\n */\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n","import type { UseSessionReturn } from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useSessionContext } from '../contexts';\n\ntype UseSession = () => UseSessionReturn;\n\nconst hookName = `useSession`;\n/**\n * The `useSession()` hook provides access to the current user's [`Session`](https://clerk.com/docs/references/javascript/session) object, as well as helpers for setting the active session.\n *\n * @unionReturnHeadings\n * [\"Initialization\", \"Signed out\", \"Signed in\"]\n *\n * @function\n *\n * @param [options] - An object containing options for the `useSession()` hook.\n *\n * @example\n * ### Access the `Session` object\n *\n * The following example uses the `useSession()` hook to access the `Session` object, which has the `lastActiveAt` property. The `lastActiveAt` property is a `Date` object used to show the time the session was last active.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useSession } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isLoaded, session, isSignedIn } = useSession()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *   if (!isSignedIn) {\n *     // Handle signed out state\n *     return null\n *   }\n *\n *   return (\n *     <div>\n *       <p>This session has been active since {session.lastActiveAt.toLocaleString()}</p>\n *     </div>\n *   )\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../../docs/use-session.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n */\nexport const useSession: UseSession = () => {\n  useAssertWrappedByClerkProvider(hookName);\n\n  const session = useSessionContext();\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled(hookName));\n\n  if (session === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, session: undefined };\n  }\n\n  if (session === null) {\n    return { isLoaded: true, isSignedIn: false, session: null };\n  }\n\n  return { isLoaded: true, isSignedIn: clerk.isSignedIn, session };\n};\n","import type { UseSessionListReturn } from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useClientContext } from '../contexts';\n\nconst hookName = 'useSessionList';\n/**\n * The `useSessionList()` hook returns an array of [`Session`](https://clerk.com/docs/references/javascript/session) objects that have been registered on the client device.\n *\n * @unionReturnHeadings\n * [\"Initialization\", \"Loaded\"]\n *\n * @function\n *\n * @example\n * ### Get a list of sessions\n *\n * The following example uses `useSessionList()` to get a list of sessions that have been registered on the client device. The `sessions` property is used to show the number of times the user has visited the page.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useSessionList } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isLoaded, sessions } = useSessionList()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   return (\n *     <div>\n *       <p>Welcome back. You've been here {sessions.length} times before.</p>\n *     </div>\n *   )\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../../docs/use-session-list.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n */\nexport const useSessionList = (): UseSessionListReturn => {\n  useAssertWrappedByClerkProvider(hookName);\n\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled(hookName));\n\n  if (!client) {\n    return { isLoaded: false, sessions: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import type { UseUserReturn } from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useUserContext } from '../contexts';\n\nconst hookName = 'useUser';\n/**\n * The `useUser()` hook provides access to the current user's [`User`](https://clerk.com/docs/references/javascript/user) object, which contains all the data for a single user in your application and provides methods to manage their account. This hook also allows you to check if the user is signed in and if Clerk has loaded and initialized.\n *\n * @unionReturnHeadings\n * [\"Initialization\", \"Signed out\", \"Signed in\"]\n *\n * @example\n * ### Get the current user\n *\n * The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user) object, which contains the current user's data such as their full name. The `isLoaded` and `isSignedIn` properties are used to handle the loading state and to check if the user is signed in, respectively.\n *\n * ```tsx {{ filename: 'src/Example.tsx' }}\n * import { useUser } from '@clerk/clerk-react'\n *\n * export default function Example() {\n *   const { isSignedIn, user, isLoaded } = useUser()\n *\n *   if (!isLoaded) {\n *     return <div>Loading...</div>\n *   }\n *\n *   if (!isSignedIn) {\n *     return <div>Sign in to view this page</div>\n *   }\n *\n *   return <div>Hello {user.firstName}!</div>\n * }\n * ```\n *\n * @example\n * ### Update user data\n *\n * The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user) object, which calls the [`update()`](https://clerk.com/docs/references/javascript/user#update) method to update the current user's information.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useUser } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isSignedIn, isLoaded, user } = useUser()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   if (!isSignedIn) return null\n *\n *   const updateUser = async () => {\n *     await user.update({\n *       firstName: 'John',\n *       lastName: 'Doe',\n *     })\n *   }\n *\n *   return (\n *     <>\n *       <button onClick={updateUser}>Update your name</button>\n *       <p>user.firstName: {user.firstName}</p>\n *       <p>user.lastName: {user.lastName}</p>\n *     </>\n *   )\n * }\n * ```\n * </Tab>\n * <Tab>\n *\n * {@include ../../../docs/use-user.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n *\n * @example\n * ### Reload user data\n *\n * The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user) object, which calls the [`reload()`](https://clerk.com/docs/references/javascript/user#reload) method to get the latest user's information.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useUser } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isSignedIn, isLoaded, user } = useUser();\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null;\n *   }\n *\n *   if (!isSignedIn) return null;\n *\n *   const updateUser = async () => {\n *     // Update data via an API endpoint\n *     const updateMetadata = await fetch('/api/updateMetadata', {\n *       method: 'POST',\n *       body: JSON.stringify({\n *         role: 'admin'\n *       })\n *     });\n *\n *     // Check if the update was successful\n *     if ((await updateMetadata.json()).message !== 'success') {\n *       throw new Error('Error updating');\n *     }\n *\n *     // If the update was successful, reload the user data\n *     await user.reload();\n *   };\n *\n *   return (\n *     <>\n *       <button onClick={updateUser}>Update your metadata</button>\n *       <p>user role: {user.publicMetadata.role}</p>\n *     </>\n *   );\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../../docs/use-user.md#nextjs-02}\n *\n * </Tab>\n * </Tabs>\n */\nexport function useUser(): UseUserReturn {\n  useAssertWrappedByClerkProvider(hookName);\n\n  const user = useUserContext();\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled(hookName));\n\n  if (user === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, user: undefined };\n  }\n\n  if (user === null) {\n    return { isLoaded: true, isSignedIn: false, user: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, user };\n}\n","import type { LoadedClerk } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext } from '../contexts';\n\n/**\n * > [!WARNING]\n * > This hook should only be used for advanced use cases, such as building a completely custom OAuth flow or as an escape hatch to access to the `Clerk` object.\n *\n * The `useClerk()` hook provides access to the [`Clerk`](https://clerk.com/docs/references/javascript/clerk) object, allowing you to build alternatives to any Clerk Component.\n *\n * @function\n *\n * @returns The `useClerk()` hook returns the `Clerk` object, which includes all the methods and properties listed in the [`Clerk` reference](https://clerk.com/docs/references/javascript/clerk).\n *\n * @example\n *\n * The following example uses the `useClerk()` hook to access the `clerk` object. The `clerk` object is used to call the [`openSignIn()`](https://clerk.com/docs/references/javascript/clerk#sign-in) method to open the sign-in modal.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useClerk } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const clerk = useClerk()\n *\n *   return <button onClick={() => clerk.openSignIn({})}>Sign in</button>\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../../docs/use-clerk.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n */\nexport const useClerk = (): LoadedClerk => {\n  useAssertWrappedByClerkProvider('useClerk');\n  return useClerkInstanceContext();\n};\n","import { dequal as deepEqual } from 'dequal';\nimport React from 'react';\n\ntype UseMemoFactory<T> = () => T;\ntype UseMemoDependencyArray = Exclude<Parameters<typeof React.useMemo>[1], 'undefined'>;\ntype UseDeepEqualMemo = <T>(factory: UseMemoFactory<T>, dependencyArray: UseMemoDependencyArray) => T;\n\nconst useDeepEqualMemoize = <T>(value: T) => {\n  const ref = React.useRef<T>(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React.useMemo(() => ref.current, [ref.current]);\n};\n\n/**\n * @internal\n */\nexport const useDeepEqualMemo: UseDeepEqualMemo = (factory, dependencyArray) => {\n  return React.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\n\n/**\n * @internal\n */\nexport const isDeeplyEqual = deepEqual;\n","import type { Clerk, SessionVerificationLevel } from '@clerk/types';\nimport { useCallback, useRef } from 'react';\n\nimport { validateReverificationConfig } from '../../authorization';\nimport { isReverificationHint, reverificationError } from '../../authorization-errors';\nimport { ClerkRuntimeError, isClerkAPIResponseError } from '../../error';\nimport { eventMethodCalled } from '../../telemetry';\nimport { createDeferredPromise } from '../../utils/createDeferredPromise';\nimport { useClerk } from './useClerk';\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect';\n\nconst CLERK_API_REVERIFICATION_ERROR_CODE = 'session_reverification_required';\n\nasync function resolveResult<T>(result: Promise<T> | T): Promise<T | ReturnType<typeof reverificationError>> {\n  try {\n    const r = await result;\n    if (r instanceof Response) {\n      return r.json();\n    }\n    return r;\n  } catch (e) {\n    // Treat fapi assurance as an assurance hint\n    if (isClerkAPIResponseError(e) && e.errors.find(({ code }) => code === CLERK_API_REVERIFICATION_ERROR_CODE)) {\n      return reverificationError();\n    }\n\n    // rethrow\n    throw e;\n  }\n}\n\ntype ExcludeClerkError<T> = T extends { clerk_error: any } ? never : T;\n\n/**\n * @interface\n */\ntype NeedsReverificationParameters = {\n  cancel: () => void;\n  complete: () => void;\n  level: SessionVerificationLevel | undefined;\n};\n\n/**\n * The optional options object.\n * @interface\n */\ntype UseReverificationOptions = {\n  /**\n   * A handler that is called when reverification is needed, this will opt-out of using the default UI when provided.\n   *\n   * @param cancel - A function that will cancel the reverification process.\n   * @param complete - A function that will retry the original request after reverification.\n   * @param level - The level returned with the reverification hint.\n   *\n   */\n  onNeedsReverification?: (properties: NeedsReverificationParameters) => void;\n};\n\n/**\n * @interface\n */\ntype UseReverificationResult<Fetcher extends (...args: any[]) => Promise<any> | undefined> = (\n  ...args: Parameters<Fetcher>\n) => Promise<ExcludeClerkError<Awaited<ReturnType<Fetcher>>>>;\n\n/**\n * @interface\n */\ntype UseReverification = <\n  Fetcher extends (...args: any[]) => Promise<any> | undefined,\n  Options extends UseReverificationOptions = UseReverificationOptions,\n>(\n  fetcher: Fetcher,\n  options?: Options,\n) => UseReverificationResult<Fetcher>;\n\ntype CreateReverificationHandlerParams = UseReverificationOptions & {\n  openUIComponent: Clerk['__internal_openReverification'];\n  telemetry: Clerk['telemetry'];\n};\n\nfunction createReverificationHandler(params: CreateReverificationHandlerParams) {\n  function assertReverification<Fetcher extends (...args: any[]) => Promise<any> | undefined>(\n    fetcher: Fetcher,\n  ): (...args: Parameters<Fetcher>) => Promise<ExcludeClerkError<Awaited<ReturnType<Fetcher>>>> {\n    return (async (...args: Parameters<Fetcher>) => {\n      let result = await resolveResult(fetcher(...args));\n\n      if (isReverificationHint(result)) {\n        /**\n         * Create a promise\n         */\n        const resolvers = createDeferredPromise();\n\n        const isValidMetadata = validateReverificationConfig(result.clerk_error.metadata?.reverification);\n\n        const level = isValidMetadata ? isValidMetadata().level : undefined;\n\n        const cancel = () => {\n          resolvers.reject(\n            new ClerkRuntimeError('User cancelled attempted verification', {\n              code: 'reverification_cancelled',\n            }),\n          );\n        };\n\n        const complete = () => {\n          resolvers.resolve(true);\n        };\n\n        if (params.onNeedsReverification === undefined) {\n          /**\n           * On success resolve the pending promise\n           * On cancel reject the pending promise\n           */\n          params.openUIComponent?.({\n            level: level,\n            afterVerification: complete,\n            afterVerificationCancelled: cancel,\n          });\n        } else {\n          params.onNeedsReverification({\n            cancel,\n            complete,\n            level,\n          });\n        }\n\n        /**\n         * Wait until the promise from above have been resolved or rejected\n         */\n        await resolvers.promise;\n\n        /**\n         * After the promise resolved successfully try the original request one more time\n         */\n        result = await resolveResult(fetcher(...args));\n      }\n\n      return result;\n    }) as ExcludeClerkError<Awaited<ReturnType<Fetcher>>>;\n  }\n\n  return assertReverification;\n}\n\n/**\n * > [!WARNING]\n * >\n * > Depending on the SDK you're using, this feature requires `@clerk/nextjs@6.12.7` or later, `@clerk/clerk-react@5.25.1` or later, and `@clerk/clerk-js@5.57.1` or later.\n *\n * The `useReverification()` hook is used to handle a session's reverification flow. If a request requires reverification, a modal will display, prompting the user to verify their credentials. Upon successful verification, the original request will automatically retry.\n *\n * @function\n *\n * @returns The `useReverification()` hook returns an array with the \"enhanced\" fetcher.\n *\n * @example\n * ### Handle cancellation of the reverification process\n *\n * The following example demonstrates how to handle scenarios where a user cancels the reverification flow, such as closing the modal, which might result in `myData` being `null`.\n *\n * In the following example, `myFetcher` would be a function in your backend that fetches data from the route that requires reverification. See the [guide on how to require reverification](https://clerk.com/docs/guides/reverification) for more information.\n *\n * ```tsx {{ filename: 'src/components/MyButton.tsx' }}\n * import { useReverification } from '@clerk/clerk-react'\n * import { isReverificationCancelledError } from '@clerk/clerk-react/error'\n *\n * type MyData = {\n *   balance: number\n * }\n *\n * export function MyButton() {\n *   const fetchMyData = () => fetch('/api/balance').then(res=> res.json() as Promise<MyData>)\n *   const enhancedFetcher = useReverification(fetchMyData);\n *\n *   const handleClick = async () => {\n *     try {\n *       const myData = await enhancedFetcher()\n *       //     ^ is types as `MyData`\n *     } catch (e) {\n *       // Handle error returned from the fetcher here\n *\n *       // You can also handle cancellation with the following\n *       if (isReverificationCancelledError(err)) {\n *         // Handle the cancellation error here\n *       }\n *     }\n *   }\n *\n *   return <button onClick={handleClick}>Update User</button>\n * }\n * ```\n *\n */\nexport const useReverification: UseReverification = (fetcher, options) => {\n  const { __internal_openReverification, telemetry } = useClerk();\n  const fetcherRef = useRef(fetcher);\n  const optionsRef = useRef(options);\n\n  telemetry?.record(\n    eventMethodCalled('useReverification', {\n      onNeedsReverification: Boolean(options?.onNeedsReverification),\n    }),\n  );\n\n  // Keep fetcher and options ref in sync\n  useSafeLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    optionsRef.current = options;\n  });\n\n  return useCallback(\n    (...args) => {\n      const handler = createReverificationHandler({\n        openUIComponent: __internal_openReverification,\n        telemetry,\n        ...optionsRef.current,\n      })(fetcherRef.current);\n      return handler(...args);\n    },\n    [__internal_openReverification, telemetry],\n  );\n};\n","import type { ClerkPaginatedResponse, ClerkResource, EnvironmentResource, ForPayerType } from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useUserContext,\n} from '../contexts';\nimport type { PagesOrInfiniteOptions, PaginatedHookConfig, PaginatedResources } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\n/**\n * @internal\n */\ntype CommerceHookConfig<TResource extends ClerkResource, TParams extends PagesOrInfiniteOptions> = {\n  hookName: string;\n  resourceType: string;\n  useFetcher: (\n    param: ForPayerType,\n  ) => ((params: TParams & { orgId?: string }) => Promise<ClerkPaginatedResponse<TResource>>) | undefined;\n  options?: {\n    unauthenticated?: boolean;\n  };\n};\n\n/**\n * A hook factory that creates paginated data fetching hooks for commerce-related resources.\n * It provides a standardized way to create hooks that can fetch either user or organization resources\n * with built-in pagination support.\n *\n * The generated hooks handle:\n * - Clerk authentication context\n * - Resource-specific data fetching\n * - Pagination (both traditional and infinite scroll)\n * - Telemetry tracking\n * - Type safety for the specific resource.\n *\n * @internal\n */\nexport function createCommercePaginatedHook<TResource extends ClerkResource, TParams extends PagesOrInfiniteOptions>({\n  hookName,\n  resourceType,\n  useFetcher,\n  options,\n}: CommerceHookConfig<TResource, TParams>) {\n  type HookParams = PaginatedHookConfig<PagesOrInfiniteOptions> & {\n    for?: ForPayerType;\n  };\n\n  return function useCommerceHook<T extends HookParams>(\n    params?: T,\n  ): PaginatedResources<TResource, T extends { infinite: true } ? true : false> {\n    const { for: _for, ...paginationParams } = params || ({} as Partial<T>);\n\n    useAssertWrappedByClerkProvider(hookName);\n\n    const fetchFn = useFetcher(_for || 'user');\n\n    const safeValues = useWithSafeValues(paginationParams, {\n      initialPage: 1,\n      pageSize: 10,\n      keepPreviousData: false,\n      infinite: false,\n      __experimental_mode: undefined,\n    } as unknown as T);\n\n    const clerk = useClerkInstanceContext();\n\n    // @ts-expect-error `__unstable__environment` is not typed\n    const environment = clerk.__unstable__environment as unknown as EnvironmentResource | null | undefined;\n    const user = useUserContext();\n    const { organization } = useOrganizationContext();\n\n    clerk.telemetry?.record(eventMethodCalled(hookName));\n\n    const hookParams =\n      typeof paginationParams === 'undefined'\n        ? undefined\n        : ({\n            initialPage: safeValues.initialPage,\n            pageSize: safeValues.pageSize,\n            ...(_for === 'organization' ? { orgId: organization?.id } : {}),\n          } as TParams);\n\n    const isOrganization = _for === 'organization';\n    const billingEnabled = isOrganization\n      ? environment?.commerceSettings.billing.organization.enabled\n      : environment?.commerceSettings.billing.user.enabled;\n\n    const isEnabled = !!hookParams && clerk.loaded && !!billingEnabled;\n\n    const result = usePagesOrInfinite<TParams, ClerkPaginatedResponse<TResource>>(\n      (hookParams || {}) as TParams,\n      fetchFn,\n      {\n        keepPreviousData: safeValues.keepPreviousData,\n        infinite: safeValues.infinite,\n        enabled: isEnabled,\n        ...(options?.unauthenticated ? {} : { isSignedIn: Boolean(user) }),\n        __experimental_mode: safeValues.__experimental_mode,\n      },\n      {\n        type: resourceType,\n        userId: user?.id,\n        ...(_for === 'organization' ? { orgId: organization?.id } : {}),\n      },\n    );\n\n    return result;\n  };\n}\n","import type { CommerceStatementResource, GetStatementsParams } from '@clerk/types';\n\nimport { useClerkInstanceContext } from '../contexts';\nimport { createCommercePaginatedHook } from './createCommerceHook';\n\n/**\n * @internal\n */\nexport const useStatements = createCommercePaginatedHook<CommerceStatementResource, GetStatementsParams>({\n  hookName: 'useStatements',\n  resourceType: 'commerce-statements',\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    if (clerk.loaded) {\n      return clerk.billing.getStatements;\n    }\n    return undefined;\n  },\n});\n","import type { CommercePaymentResource, GetPaymentAttemptsParams } from '@clerk/types';\n\nimport { useClerkInstanceContext } from '../contexts';\nimport { createCommercePaginatedHook } from './createCommerceHook';\n\n/**\n * @internal\n */\nexport const usePaymentAttempts = createCommercePaginatedHook<CommercePaymentResource, GetPaymentAttemptsParams>({\n  hookName: 'usePaymentAttempts',\n  resourceType: 'commerce-payment-attempts',\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    if (clerk.loaded) {\n      return clerk.billing.getPaymentAttempts;\n    }\n    return undefined;\n  },\n});\n","import type { CommercePaymentSourceResource, GetPaymentSourcesParams } from '@clerk/types';\n\nimport { useOrganizationContext, useUserContext } from '../contexts';\nimport { createCommercePaginatedHook } from './createCommerceHook';\n\n/**\n * @internal\n */\nexport const usePaymentMethods = createCommercePaginatedHook<CommercePaymentSourceResource, GetPaymentSourcesParams>({\n  hookName: 'usePaymentMethods',\n  resourceType: 'commerce-payment-methods',\n  useFetcher: resource => {\n    const { organization } = useOrganizationContext();\n    const user = useUserContext();\n\n    if (resource === 'organization') {\n      return organization?.getPaymentSources;\n    }\n    return user?.getPaymentSources;\n  },\n});\n","import type { CommercePlanResource, GetPlansParams } from '@clerk/types';\n\nimport { useClerkInstanceContext } from '../contexts';\nimport { createCommercePaginatedHook } from './createCommerceHook';\n\n/**\n * @internal\n */\nexport const usePlans = createCommercePaginatedHook<CommercePlanResource, GetPlansParams>({\n  hookName: 'usePlans',\n  resourceType: 'commerce-plans',\n  useFetcher: _for => {\n    const clerk = useClerkInstanceContext();\n    if (!clerk.loaded) {\n      return undefined;\n    }\n    return ({ orgId, ...rest }) => {\n      // Cleanup `orgId` from the params\n      return clerk.billing.getPlans({ ...rest, for: _for });\n    };\n  },\n  options: {\n    unauthenticated: true,\n  },\n});\n","import type { EnvironmentResource, ForPayerType } from '@clerk/types';\nimport { useCallback } from 'react';\n\nimport { eventMethodCalled } from '../../telemetry/events';\nimport { useSWR } from '../clerk-swr';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useUserContext,\n} from '../contexts';\n\nconst hookName = 'useSubscription';\n\ntype UseSubscriptionParams = {\n  for?: ForPayerType;\n  /**\n   * If `true`, the previous data will be kept in the cache until new data is fetched.\n   *\n   * @default false\n   */\n  keepPreviousData?: boolean;\n};\n\n/**\n * @internal\n *\n * @experimental This is an experimental API for the Billing feature that is available under a public beta, and the API is subject to change.\n *\n * Fetches subscription data for the current user or organization.\n */\nexport const useSubscription = (params?: UseSubscriptionParams) => {\n  useAssertWrappedByClerkProvider(hookName);\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  const { organization } = useOrganizationContext();\n\n  // @ts-expect-error `__unstable__environment` is not typed\n  const environment = clerk.__unstable__environment as unknown as EnvironmentResource | null | undefined;\n\n  clerk.telemetry?.record(eventMethodCalled(hookName));\n\n  const isOrganization = params?.for === 'organization';\n  const billingEnabled = isOrganization\n    ? environment?.commerceSettings.billing.organization.enabled\n    : environment?.commerceSettings.billing.user.enabled;\n\n  const swr = useSWR(\n    billingEnabled\n      ? {\n          type: 'commerce-subscription',\n          userId: user?.id,\n          args: { orgId: isOrganization ? organization?.id : undefined },\n        }\n      : null,\n    ({ args, userId }) => {\n      // This allows for supporting keeping previous data between revalidations\n      // but also hides the stale data on sign-out.\n      if (userId) {\n        return clerk.billing.getSubscription(args);\n      }\n      return null;\n    },\n    {\n      dedupingInterval: 1_000 * 60,\n      keepPreviousData: params?.keepPreviousData,\n    },\n  );\n\n  const revalidate = useCallback(() => swr.mutate(), [swr.mutate]);\n\n  return {\n    data: swr.data,\n    error: swr.error,\n    isLoading: swr.isLoading,\n    isFetching: swr.isValidating,\n    revalidate,\n  };\n};\n","import type {\n  __experimental_CheckoutCacheState,\n  __experimental_CheckoutInstance,\n  CommerceCheckoutResource,\n  SetActiveNavigate,\n} from '@clerk/types';\nimport { useMemo, useSyncExternalStore } from 'react';\n\nimport type { ClerkAPIResponseError } from '../..';\nimport type { __experimental_CheckoutProvider } from '../contexts';\nimport { useCheckoutContext } from '../contexts';\nimport { useClerk } from './useClerk';\nimport { useOrganization } from './useOrganization';\nimport { useUser } from './useUser';\n\n/**\n * Utility type that removes function properties from a type.\n */\ntype RemoveFunctions<T> = {\n  [K in keyof T as T[K] extends (...args: any[]) => any ? never : K]: T[K];\n};\n\n/**\n * Utility type that makes all properties `null`.\n */\ntype ForceNull<T> = {\n  [K in keyof T]: null;\n};\n\ntype CheckoutProperties = Omit<RemoveFunctions<CommerceCheckoutResource>, 'pathRoot' | 'status'>;\n\ntype FetchStatusAndError =\n  | {\n      error: ClerkAPIResponseError;\n      fetchStatus: 'error';\n    }\n  | {\n      error: null;\n      fetchStatus: 'idle' | 'fetching';\n    };\n\n/**\n * @internal\n * On status === 'needs_initialization', all properties are null.\n * On status === 'needs_confirmation' or 'completed', all properties are defined the same as the CommerceCheckoutResource.\n */\ntype CheckoutPropertiesPerStatus =\n  | ({\n      status: Extract<__experimental_CheckoutCacheState['status'], 'needs_initialization'>;\n    } & ForceNull<CheckoutProperties>)\n  | ({\n      status: Extract<__experimental_CheckoutCacheState['status'], 'needs_confirmation' | 'completed'>;\n    } & CheckoutProperties);\n\ntype __experimental_UseCheckoutReturn = {\n  checkout: FetchStatusAndError &\n    CheckoutPropertiesPerStatus & {\n      confirm: __experimental_CheckoutInstance['confirm'];\n      start: __experimental_CheckoutInstance['start'];\n      clear: () => void;\n      finalize: (params?: { navigate?: SetActiveNavigate }) => void;\n      getState: () => __experimental_CheckoutCacheState;\n      isStarting: boolean;\n      isConfirming: boolean;\n    };\n};\n\ntype Params = Parameters<typeof __experimental_CheckoutProvider>[0];\n\nexport const useCheckout = (options?: Params): __experimental_UseCheckoutReturn => {\n  const contextOptions = useCheckoutContext();\n  const { for: forOrganization, planId, planPeriod } = options || contextOptions;\n\n  const clerk = useClerk();\n  const { organization } = useOrganization();\n  const { isLoaded, user } = useUser();\n\n  if (!isLoaded) {\n    throw new Error('Clerk: Ensure that `useCheckout` is inside a component wrapped with `<ClerkLoaded />`.');\n  }\n\n  if (!user) {\n    throw new Error('Clerk: Ensure that `useCheckout` is inside a component wrapped with `<SignedIn />`.');\n  }\n\n  if (forOrganization === 'organization' && !organization) {\n    throw new Error(\n      'Clerk: Ensure your flow checks for an active organization. Retrieve `orgId` from `useAuth()` and confirm it is defined. For SSR, see: https://clerk.com/docs/references/backend/types/auth-object#how-to-access-the-auth-object',\n    );\n  }\n\n  const manager = useMemo(\n    () => clerk.__experimental_checkout({ planId, planPeriod, for: forOrganization }),\n    [user.id, organization?.id, planId, planPeriod, forOrganization],\n  );\n\n  const managerProperties = useSyncExternalStore(\n    cb => manager.subscribe(cb),\n    () => manager.getState(),\n    () => manager.getState(),\n  );\n\n  const properties = useMemo<CheckoutProperties | ForceNull<CheckoutProperties>>(() => {\n    if (!managerProperties.checkout) {\n      return {\n        id: null,\n        externalClientSecret: null,\n        externalGatewayId: null,\n        status: null,\n        totals: null,\n        isImmediatePlanChange: null,\n        planPeriod: null,\n        plan: null,\n        paymentSource: null,\n        freeTrialEndsAt: null,\n        payer: null,\n      };\n    }\n    const {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      reload,\n      confirm,\n      pathRoot,\n      // All the above need to be removed from the properties\n      ...rest\n    } = managerProperties.checkout;\n    return rest;\n  }, [managerProperties.checkout]);\n\n  const checkout = {\n    ...properties,\n    getState: manager.getState,\n    start: manager.start,\n    confirm: manager.confirm,\n    clear: manager.clear,\n    finalize: manager.finalize,\n    isStarting: managerProperties.isStarting,\n    isConfirming: managerProperties.isConfirming,\n    error: managerProperties.error,\n    status: managerProperties.status,\n    fetchStatus: managerProperties.fetchStatus,\n  };\n\n  return {\n    checkout,\n  } as __experimental_UseCheckoutReturn;\n};\n","/* eslint-disable @typescript-eslint/consistent-type-imports */\nimport type { CommerceCheckoutResource, EnvironmentResource, ForPayerType } from '@clerk/types';\nimport type { Stripe, StripeElements } from '@stripe/stripe-js';\nimport React, { type PropsWithChildren, ReactNode, useCallback, useEffect, useMemo, useState } from 'react';\nimport useSWR from 'swr';\nimport useSWRMutation from 'swr/mutation';\n\nimport { createContextAndHook } from './hooks/createContextAndHook';\nimport type { useCheckout } from './hooks/useCheckout';\nimport { useClerk } from './hooks/useClerk';\nimport { useOrganization } from './hooks/useOrganization';\nimport { useUser } from './hooks/useUser';\nimport { Elements, PaymentElement as StripePaymentElement, useElements, useStripe } from './stripe-react';\n\ntype LoadStripeFn = typeof import('@stripe/stripe-js').loadStripe;\n\ntype PaymentElementError = {\n  gateway: 'stripe';\n  error: {\n    /**\n     * For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.\n     */\n    code?: string;\n    message?: string;\n    type: string;\n  };\n};\n\nconst [StripeLibsContext, useStripeLibsContext] = createContextAndHook<{\n  loadStripe: LoadStripeFn;\n} | null>('StripeLibsContext');\n\nconst StripeLibsProvider = ({ children }: PropsWithChildren) => {\n  const clerk = useClerk();\n  const { data: stripeClerkLibs } = useSWR(\n    'clerk-stripe-sdk',\n    async () => {\n      const loadStripe = (await clerk.__internal_loadStripeJs()) as LoadStripeFn;\n      return { loadStripe };\n    },\n    {\n      keepPreviousData: true,\n      revalidateOnFocus: false,\n      dedupingInterval: Infinity,\n    },\n  );\n\n  return (\n    <StripeLibsContext.Provider\n      value={{\n        value: stripeClerkLibs || null,\n      }}\n    >\n      {children}\n    </StripeLibsContext.Provider>\n  );\n};\n\nconst useInternalEnvironment = () => {\n  const clerk = useClerk();\n  // @ts-expect-error `__unstable__environment` is not typed\n  return clerk.__unstable__environment as unknown as EnvironmentResource | null | undefined;\n};\n\nconst usePaymentSourceUtils = (forResource: ForPayerType = 'user') => {\n  const { organization } = useOrganization();\n  const { user } = useUser();\n  const resource = forResource === 'organization' ? organization : user;\n  const stripeClerkLibs = useStripeLibsContext();\n\n  const { data: initializedPaymentSource, trigger: initializePaymentSource } = useSWRMutation(\n    {\n      key: 'commerce-payment-source-initialize',\n      resourceId: resource?.id,\n    },\n    () => {\n      return resource?.initializePaymentSource({\n        gateway: 'stripe',\n      });\n    },\n  );\n\n  const environment = useInternalEnvironment();\n\n  useEffect(() => {\n    if (!resource?.id) {\n      return;\n    }\n    initializePaymentSource().catch(() => {\n      // ignore errors\n    });\n  }, [resource?.id]);\n\n  const externalGatewayId = initializedPaymentSource?.externalGatewayId;\n  const externalClientSecret = initializedPaymentSource?.externalClientSecret;\n  const paymentMethodOrder = initializedPaymentSource?.paymentMethodOrder;\n  const stripePublishableKey = environment?.commerceSettings.billing.stripePublishableKey;\n\n  const { data: stripe } = useSWR(\n    stripeClerkLibs && externalGatewayId && stripePublishableKey\n      ? { key: 'stripe-sdk', externalGatewayId, stripePublishableKey }\n      : null,\n    ({ stripePublishableKey, externalGatewayId }) => {\n      return stripeClerkLibs?.loadStripe(stripePublishableKey, {\n        stripeAccount: externalGatewayId,\n      });\n    },\n    {\n      keepPreviousData: true,\n      revalidateOnFocus: false,\n      dedupingInterval: 1_000 * 60, // 1 minute\n    },\n  );\n\n  return {\n    stripe,\n    initializePaymentSource,\n    externalClientSecret,\n    paymentMethodOrder,\n  };\n};\n\ntype internalStripeAppearance = {\n  colorPrimary: string;\n  colorBackground: string;\n  colorText: string;\n  colorTextSecondary: string;\n  colorSuccess: string;\n  colorDanger: string;\n  colorWarning: string;\n  fontWeightNormal: string;\n  fontWeightMedium: string;\n  fontWeightBold: string;\n  fontSizeXl: string;\n  fontSizeLg: string;\n  fontSizeSm: string;\n  fontSizeXs: string;\n  borderRadius: string;\n  spacingUnit: string;\n};\n\ntype PaymentElementProviderProps = {\n  checkout?: CommerceCheckoutResource | ReturnType<typeof useCheckout>['checkout'];\n  stripeAppearance?: internalStripeAppearance;\n  /**\n   * Default to `user` if not provided.\n   *\n   * @default 'user'\n   */\n  for?: ForPayerType;\n  paymentDescription?: string;\n};\n\nconst [PaymentElementContext, usePaymentElementContext] = createContextAndHook<\n  ReturnType<typeof usePaymentSourceUtils> &\n    PaymentElementProviderProps & {\n      setIsPaymentElementReady: (isPaymentElementReady: boolean) => void;\n      isPaymentElementReady: boolean;\n    }\n>('PaymentElementContext');\n\nconst [StripeUtilsContext, useStripeUtilsContext] = createContextAndHook<{\n  stripe: Stripe | undefined | null;\n  elements: StripeElements | undefined | null;\n}>('StripeUtilsContext');\n\nconst ValidateStripeUtils = ({ children }: PropsWithChildren) => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  return <StripeUtilsContext.Provider value={{ value: { stripe, elements } }}>{children}</StripeUtilsContext.Provider>;\n};\n\nconst DummyStripeUtils = ({ children }: PropsWithChildren) => {\n  return <StripeUtilsContext.Provider value={{ value: {} as any }}>{children}</StripeUtilsContext.Provider>;\n};\n\nconst PropsProvider = ({ children, ...props }: PropsWithChildren<PaymentElementProviderProps>) => {\n  const utils = usePaymentSourceUtils(props.for);\n  const [isPaymentElementReady, setIsPaymentElementReady] = useState(false);\n  return (\n    <PaymentElementContext.Provider\n      value={{\n        value: {\n          ...props,\n          ...utils,\n          setIsPaymentElementReady,\n          isPaymentElementReady,\n        },\n      }}\n    >\n      {children}\n    </PaymentElementContext.Provider>\n  );\n};\n\nconst PaymentElementProvider = ({ children, ...props }: PropsWithChildren<PaymentElementProviderProps>) => {\n  return (\n    <StripeLibsProvider>\n      <PropsProvider {...props}>\n        <PaymentElementInternalRoot>{children}</PaymentElementInternalRoot>\n      </PropsProvider>\n    </StripeLibsProvider>\n  );\n};\n\nconst PaymentElementInternalRoot = (props: PropsWithChildren) => {\n  const { stripe, externalClientSecret, stripeAppearance } = usePaymentElementContext();\n\n  if (stripe && externalClientSecret) {\n    return (\n      <Elements\n        // This key is used to reset the payment intent, since Stripe doesn't provide a way to reset the payment intent.\n        key={externalClientSecret}\n        stripe={stripe}\n        options={{\n          loader: 'never',\n          clientSecret: externalClientSecret,\n          appearance: {\n            variables: stripeAppearance,\n          },\n        }}\n      >\n        <ValidateStripeUtils>{props.children}</ValidateStripeUtils>\n      </Elements>\n    );\n  }\n\n  return <DummyStripeUtils>{props.children}</DummyStripeUtils>;\n};\n\nconst PaymentElement = ({ fallback }: { fallback?: ReactNode }) => {\n  const {\n    setIsPaymentElementReady,\n    paymentMethodOrder,\n    checkout,\n    stripe,\n    externalClientSecret,\n    paymentDescription,\n    for: _for,\n  } = usePaymentElementContext();\n  const environment = useInternalEnvironment();\n\n  const applePay = useMemo(() => {\n    if (!checkout || !checkout.totals || !checkout.plan) {\n      return undefined;\n    }\n\n    return {\n      recurringPaymentRequest: {\n        paymentDescription: paymentDescription || '',\n        managementURL:\n          _for === 'organization'\n            ? environment?.displayConfig.organizationProfileUrl || ''\n            : environment?.displayConfig.userProfileUrl || '',\n        regularBilling: {\n          amount: checkout.totals.totalDueNow?.amount || checkout.totals.grandTotal.amount,\n          label: checkout.plan.name,\n          recurringPaymentIntervalUnit: checkout.planPeriod === 'annual' ? 'year' : 'month',\n        },\n      },\n    } as const;\n  }, [checkout, paymentDescription, _for, environment]);\n\n  const options = useMemo(() => {\n    return {\n      layout: {\n        type: 'tabs',\n        defaultCollapsed: false,\n      },\n      paymentMethodOrder,\n      applePay,\n    } as const;\n  }, [applePay, paymentMethodOrder]);\n\n  const onReady = useCallback(() => {\n    setIsPaymentElementReady(true);\n  }, [setIsPaymentElementReady]);\n\n  if (!stripe || !externalClientSecret) {\n    return <>{fallback}</>;\n  }\n\n  return (\n    <StripePaymentElement\n      fallback={fallback}\n      onReady={onReady}\n      options={options}\n    />\n  );\n};\n\nconst throwLibsMissingError = () => {\n  throw new Error(\n    'Clerk: Unable to submit, Stripe libraries are not yet loaded. Be sure to check `isFormReady` before calling `submit`.',\n  );\n};\n\ntype UsePaymentElementReturn = {\n  submit: () => Promise<\n    | {\n        data: { gateway: 'stripe'; paymentToken: string };\n        error: null;\n      }\n    | {\n        data: null;\n        error: PaymentElementError;\n      }\n  >;\n  reset: () => Promise<void>;\n  isFormReady: boolean;\n} & (\n  | {\n      provider: {\n        name: 'stripe';\n      };\n      isProviderReady: true;\n    }\n  | {\n      provider: undefined;\n      isProviderReady: false;\n    }\n);\n\nconst usePaymentElement = (): UsePaymentElementReturn => {\n  const { isPaymentElementReady, initializePaymentSource } = usePaymentElementContext();\n  const { stripe, elements } = useStripeUtilsContext();\n  const { externalClientSecret } = usePaymentElementContext();\n\n  const submit = useCallback(async () => {\n    if (!stripe || !elements) {\n      return throwLibsMissingError();\n    }\n\n    const { setupIntent, error } = await stripe.confirmSetup({\n      elements,\n      confirmParams: {\n        return_url: window.location.href,\n      },\n      redirect: 'if_required',\n    });\n    if (error) {\n      return {\n        data: null,\n        error: {\n          gateway: 'stripe',\n          error: {\n            code: error.code,\n            message: error.message,\n            type: error.type,\n          },\n        },\n      } as const;\n    }\n    return {\n      data: { gateway: 'stripe', paymentToken: setupIntent.payment_method as string },\n      error: null,\n    } as const;\n  }, [stripe, elements]);\n\n  const reset = useCallback(async () => {\n    if (!stripe || !elements) {\n      return throwLibsMissingError();\n    }\n\n    await initializePaymentSource();\n  }, [stripe, elements, initializePaymentSource]);\n\n  const isProviderReady = Boolean(stripe && externalClientSecret);\n\n  if (!isProviderReady) {\n    return {\n      submit: throwLibsMissingError,\n      reset: throwLibsMissingError,\n      isFormReady: false,\n      provider: undefined,\n      isProviderReady: false,\n    };\n  }\n  return {\n    submit,\n    reset,\n    isFormReady: isPaymentElementReady,\n    provider: {\n      name: 'stripe',\n    },\n    isProviderReady: isProviderReady,\n  };\n};\n\nexport {\n  PaymentElement as __experimental_PaymentElement,\n  PaymentElementProvider as __experimental_PaymentElementProvider,\n  usePaymentElement as __experimental_usePaymentElement,\n};\n","/**\n * Original source: https://github.com/stripe/react-stripe-js.\n *\n * The current version of this file is a fork of the original version.\n * The main difference is that we have kept only the necessary parts of the file.\n * This is because we don't need it and it's not used in the Clerk codebase.\n *\n * The original version of this file is licensed under the MIT license.\n * Https://github.com/stripe/react-stripe-js/blob/master/LICENSE.\n */\n\nimport type { ElementProps, PaymentElementProps } from '@stripe/react-stripe-js';\nimport type {\n  Stripe,\n  StripeElement,\n  StripeElements,\n  StripeElementsOptions,\n  StripeElementType,\n} from '@stripe/stripe-js';\nimport type { FunctionComponent, PropsWithChildren, ReactNode } from 'react';\nimport React, { useState } from 'react';\n\nimport { useAttachEvent, usePrevious } from './utils';\n\ninterface ElementsContextValue {\n  elements: StripeElements | null;\n  stripe: Stripe | null;\n}\n\nconst ElementsContext = React.createContext<ElementsContextValue | null>(null);\nElementsContext.displayName = 'ElementsContext';\n\nconst parseElementsContext = (ctx: ElementsContextValue | null, useCase: string): ElementsContextValue => {\n  if (!ctx) {\n    throw new Error(\n      `Could not find Elements context; You need to wrap the part of your app that ${useCase} in an <Elements> provider.`,\n    );\n  }\n\n  return ctx;\n};\n\ninterface ElementsProps {\n  /**\n   * A [Stripe object](https://stripe.com/docs/js/initializing) or a `Promise` resolving to a `Stripe` object.\n   * The easiest way to initialize a `Stripe` object is with the the [Stripe.js wrapper module](https://github.com/stripe/stripe-js/blob/master/README.md#readme).\n   * Once this prop has been set, it can not be changed.\n   *\n   * You can also pass in `null` or a `Promise` resolving to `null` if you are performing an initial server-side render or when generating a static site.\n   */\n  stripe: PromiseLike<Stripe | null> | Stripe | null;\n\n  /**\n   * Optional [Elements configuration options](https://stripe.com/docs/js/elements_object/create).\n   * Once the stripe prop has been set, these options cannot be changed.\n   */\n  options?: StripeElementsOptions;\n}\n\ntype UnknownOptions = { [k: string]: unknown };\n\ninterface PrivateElementsProps {\n  stripe: unknown;\n  options?: UnknownOptions;\n  children?: ReactNode;\n}\n\n/**\n * The `Elements` provider allows you to use [Element components](https://stripe.com/docs/stripe-js/react#element-components) and access the [Stripe object](https://stripe.com/docs/js/initializing) in any nested component.\n * Render an `Elements` provider at the root of your React app so that it is available everywhere you need it.\n *\n * To use the `Elements` provider, call `loadStripe` from `@stripe/stripe-js` with your publishable key.\n * The `loadStripe` function will asynchronously load the Stripe.js script and initialize a `Stripe` object.\n * Pass the returned `Promise` to `Elements`.\n *\n * @docs https://stripe.com/docs/stripe-js/react#elements-provider\n */\nconst Elements: FunctionComponent<PropsWithChildren<ElementsProps>> = (({\n  stripe: rawStripeProp,\n  options,\n  children,\n}: PrivateElementsProps) => {\n  const parsed = React.useMemo(() => parseStripeProp(rawStripeProp), [rawStripeProp]);\n\n  // For a sync stripe instance, initialize into context\n  const [ctx, setContext] = React.useState<ElementsContextValue>(() => ({\n    stripe: parsed.tag === 'sync' ? parsed.stripe : null,\n    elements: parsed.tag === 'sync' ? parsed.stripe.elements(options) : null,\n  }));\n\n  React.useEffect(() => {\n    let isMounted = true;\n\n    const safeSetContext = (stripe: Stripe) => {\n      setContext(ctx => {\n        // no-op if we already have a stripe instance (https://github.com/stripe/react-stripe-js/issues/296)\n        if (ctx.stripe) {\n          return ctx;\n        }\n        return {\n          stripe,\n          elements: stripe.elements(options),\n        };\n      });\n    };\n\n    // For an async stripePromise, store it in context once resolved\n    if (parsed.tag === 'async' && !ctx.stripe) {\n      parsed.stripePromise.then(stripe => {\n        if (stripe && isMounted) {\n          // Only update Elements context if the component is still mounted\n          // and stripe is not null. We allow stripe to be null to make\n          // handling SSR easier.\n          safeSetContext(stripe);\n        }\n      });\n    } else if (parsed.tag === 'sync' && !ctx.stripe) {\n      // Or, handle a sync stripe instance going from null -> populated\n      safeSetContext(parsed.stripe);\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [parsed, ctx, options]);\n\n  // Warn on changes to stripe prop\n  const prevStripe = usePrevious(rawStripeProp);\n  React.useEffect(() => {\n    if (prevStripe !== null && prevStripe !== rawStripeProp) {\n      console.warn('Unsupported prop change on Elements: You cannot change the `stripe` prop after setting it.');\n    }\n  }, [prevStripe, rawStripeProp]);\n\n  // Apply updates to elements when options prop has relevant changes\n  const prevOptions = usePrevious(options);\n  React.useEffect(() => {\n    if (!ctx.elements) {\n      return;\n    }\n\n    const updates = extractAllowedOptionsUpdates(options, prevOptions, ['clientSecret', 'fonts']);\n\n    if (updates) {\n      ctx.elements.update(updates);\n    }\n  }, [options, prevOptions, ctx.elements]);\n\n  return <ElementsContext.Provider value={ctx}>{children}</ElementsContext.Provider>;\n}) as FunctionComponent<PropsWithChildren<ElementsProps>>;\n\nconst useElementsContextWithUseCase = (useCaseMessage: string): ElementsContextValue => {\n  const ctx = React.useContext(ElementsContext);\n  return parseElementsContext(ctx, useCaseMessage);\n};\n\nconst useElements = (): StripeElements | null => {\n  const { elements } = useElementsContextWithUseCase('calls useElements()');\n  return elements;\n};\n\nconst INVALID_STRIPE_ERROR =\n  'Invalid prop `stripe` supplied to `Elements`. We recommend using the `loadStripe` utility from `@stripe/stripe-js`. See https://stripe.com/docs/stripe-js/react#elements-props-stripe for details.';\n\n// We are using types to enforce the `stripe` prop in this lib, but in a real\n// integration `stripe` could be anything, so we need to do some sanity\n// validation to prevent type errors.\nconst validateStripe = (maybeStripe: unknown, errorMsg = INVALID_STRIPE_ERROR): null | Stripe => {\n  if (maybeStripe === null || isStripe(maybeStripe)) {\n    return maybeStripe;\n  }\n\n  throw new Error(errorMsg);\n};\n\ntype ParsedStripeProp =\n  | { tag: 'empty' }\n  | { tag: 'sync'; stripe: Stripe }\n  | { tag: 'async'; stripePromise: Promise<Stripe | null> };\n\nconst parseStripeProp = (raw: unknown, errorMsg = INVALID_STRIPE_ERROR): ParsedStripeProp => {\n  if (isPromise(raw)) {\n    return {\n      tag: 'async',\n      stripePromise: Promise.resolve(raw).then(result => validateStripe(result, errorMsg)),\n    };\n  }\n\n  const stripe = validateStripe(raw, errorMsg);\n\n  if (stripe === null) {\n    return { tag: 'empty' };\n  }\n\n  return { tag: 'sync', stripe };\n};\n\nconst isUnknownObject = (raw: unknown): raw is { [key in PropertyKey]: unknown } => {\n  return raw !== null && typeof raw === 'object';\n};\n\nconst isPromise = (raw: unknown): raw is PromiseLike<unknown> => {\n  return isUnknownObject(raw) && typeof raw.then === 'function';\n};\n\n// We are using types to enforce the `stripe` prop in this lib,\n// but in an untyped integration `stripe` could be anything, so we need\n// to do some sanity validation to prevent type errors.\nconst isStripe = (raw: unknown): raw is Stripe => {\n  return (\n    isUnknownObject(raw) &&\n    typeof raw.elements === 'function' &&\n    typeof raw.createToken === 'function' &&\n    typeof raw.createPaymentMethod === 'function' &&\n    typeof raw.confirmCardPayment === 'function'\n  );\n};\n\nconst extractAllowedOptionsUpdates = (\n  options: unknown | void,\n  prevOptions: unknown | void,\n  immutableKeys: string[],\n): UnknownOptions | null => {\n  if (!isUnknownObject(options)) {\n    return null;\n  }\n\n  return Object.keys(options).reduce((newOptions: null | UnknownOptions, key) => {\n    const isUpdated = !isUnknownObject(prevOptions) || !isEqual(options[key], prevOptions[key]);\n\n    if (immutableKeys.includes(key)) {\n      if (isUpdated) {\n        console.warn(`Unsupported prop change: options.${key} is not a mutable property.`);\n      }\n\n      return newOptions;\n    }\n\n    if (!isUpdated) {\n      return newOptions;\n    }\n\n    return { ...(newOptions || {}), [key]: options[key] };\n  }, null);\n};\n\nconst PLAIN_OBJECT_STR = '[object Object]';\n\nconst isEqual = (left: unknown, right: unknown): boolean => {\n  if (!isUnknownObject(left) || !isUnknownObject(right)) {\n    return left === right;\n  }\n\n  const leftArray = Array.isArray(left);\n  const rightArray = Array.isArray(right);\n\n  if (leftArray !== rightArray) {\n    return false;\n  }\n\n  const leftPlainObject = Object.prototype.toString.call(left) === PLAIN_OBJECT_STR;\n  const rightPlainObject = Object.prototype.toString.call(right) === PLAIN_OBJECT_STR;\n\n  if (leftPlainObject !== rightPlainObject) {\n    return false;\n  }\n\n  // not sure what sort of special object this is (regexp is one option), so\n  // fallback to reference check.\n  if (!leftPlainObject && !leftArray) {\n    return left === right;\n  }\n\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n\n  if (leftKeys.length !== rightKeys.length) {\n    return false;\n  }\n\n  const keySet: { [key: string]: boolean } = {};\n  for (let i = 0; i < leftKeys.length; i += 1) {\n    keySet[leftKeys[i]] = true;\n  }\n  for (let i = 0; i < rightKeys.length; i += 1) {\n    keySet[rightKeys[i]] = true;\n  }\n  const allKeys = Object.keys(keySet);\n  if (allKeys.length !== leftKeys.length) {\n    return false;\n  }\n\n  const l = left;\n  const r = right;\n  const pred = (key: string): boolean => {\n    return isEqual(l[key], r[key]);\n  };\n\n  return allKeys.every(pred);\n};\n\nconst useStripe = (): Stripe | null => {\n  const { stripe } = useElementsOrCheckoutSdkContextWithUseCase('calls useStripe()');\n  return stripe;\n};\n\nconst useElementsOrCheckoutSdkContextWithUseCase = (useCaseString: string): ElementsContextValue => {\n  const elementsContext = React.useContext(ElementsContext);\n\n  return parseElementsContext(elementsContext, useCaseString);\n};\n\ntype UnknownCallback = (...args: unknown[]) => any;\n\ninterface PrivateElementProps {\n  id?: string;\n  className?: string;\n  fallback?: ReactNode;\n  onChange?: UnknownCallback;\n  onBlur?: UnknownCallback;\n  onFocus?: UnknownCallback;\n  onEscape?: UnknownCallback;\n  onReady?: UnknownCallback;\n  onClick?: UnknownCallback;\n  onLoadError?: UnknownCallback;\n  onLoaderStart?: UnknownCallback;\n  onNetworksChange?: UnknownCallback;\n  onConfirm?: UnknownCallback;\n  onCancel?: UnknownCallback;\n  onShippingAddressChange?: UnknownCallback;\n  onShippingRateChange?: UnknownCallback;\n  options?: UnknownOptions;\n}\n\nconst capitalized = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst createElementComponent = (type: StripeElementType, isServer: boolean): FunctionComponent<ElementProps> => {\n  const displayName = `${capitalized(type)}Element`;\n\n  const ClientElement: FunctionComponent<PrivateElementProps> = ({\n    id,\n    className,\n    fallback,\n    options = {},\n    onBlur,\n    onFocus,\n    onReady,\n    onChange,\n    onEscape,\n    onClick,\n    onLoadError,\n    onLoaderStart,\n    onNetworksChange,\n    onConfirm,\n    onCancel,\n    onShippingAddressChange,\n    onShippingRateChange,\n  }) => {\n    const ctx = useElementsOrCheckoutSdkContextWithUseCase(`mounts <${displayName}>`);\n    const elements = 'elements' in ctx ? ctx.elements : null;\n    const [element, setElement] = React.useState<StripeElement | null>(null);\n    const elementRef = React.useRef<StripeElement | null>(null);\n    const domNode = React.useRef<HTMLDivElement | null>(null);\n    const [isReady, setReady] = useState(false);\n\n    // For every event where the merchant provides a callback, call element.on\n    // with that callback. If the merchant ever changes the callback, removes\n    // the old callback with element.off and then call element.on with the new one.\n    useAttachEvent(element, 'blur', onBlur);\n    useAttachEvent(element, 'focus', onFocus);\n    useAttachEvent(element, 'escape', onEscape);\n    useAttachEvent(element, 'click', onClick);\n    useAttachEvent(element, 'loaderror', onLoadError);\n    useAttachEvent(element, 'loaderstart', onLoaderStart);\n    useAttachEvent(element, 'networkschange', onNetworksChange);\n    useAttachEvent(element, 'confirm', onConfirm);\n    useAttachEvent(element, 'cancel', onCancel);\n    useAttachEvent(element, 'shippingaddresschange', onShippingAddressChange);\n    useAttachEvent(element, 'shippingratechange', onShippingRateChange);\n    useAttachEvent(element, 'change', onChange);\n\n    let readyCallback: UnknownCallback | undefined;\n    if (onReady) {\n      // For other Elements, pass through the Element itself.\n      readyCallback = () => {\n        setReady(true);\n        onReady(element);\n      };\n    }\n\n    useAttachEvent(element, 'ready', readyCallback);\n\n    React.useLayoutEffect(() => {\n      if (elementRef.current === null && domNode.current !== null && elements) {\n        let newElement: StripeElement | null = null;\n        if (elements) {\n          newElement = elements.create(type as any, options);\n        }\n\n        // Store element in a ref to ensure it's _immediately_ available in cleanup hooks in StrictMode\n        elementRef.current = newElement;\n        // Store element in state to facilitate event listener attachment\n        setElement(newElement);\n\n        if (newElement) {\n          newElement.mount(domNode.current);\n        }\n      }\n    }, [elements, options]);\n\n    const prevOptions = usePrevious(options);\n    React.useEffect(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const updates = extractAllowedOptionsUpdates(options, prevOptions, ['paymentRequest']);\n\n      if (updates && 'update' in elementRef.current) {\n        elementRef.current.update(updates);\n      }\n    }, [options, prevOptions]);\n\n    React.useLayoutEffect(() => {\n      return () => {\n        if (elementRef.current && typeof elementRef.current.destroy === 'function') {\n          try {\n            elementRef.current.destroy();\n            elementRef.current = null;\n          } catch {\n            // Do nothing\n          }\n        }\n      };\n    }, []);\n\n    return (\n      <>\n        {!isReady && fallback}\n        <div\n          id={id}\n          style={{\n            height: isReady ? 'unset' : '0px',\n            visibility: isReady ? 'visible' : 'hidden',\n          }}\n          className={className}\n          ref={domNode}\n        />\n      </>\n    );\n  };\n\n  // Only render the Element wrapper in a server environment.\n  const ServerElement: FunctionComponent<PrivateElementProps> = props => {\n    useElementsOrCheckoutSdkContextWithUseCase(`mounts <${displayName}>`);\n    const { id, className } = props;\n    return (\n      <div\n        id={id}\n        className={className}\n      />\n    );\n  };\n\n  const Element = isServer ? ServerElement : ClientElement;\n  Element.displayName = displayName;\n  (Element as any).__elementType = type;\n\n  return Element as FunctionComponent<ElementProps>;\n};\n\nconst isServer = typeof window === 'undefined';\nconst PaymentElement: FunctionComponent<\n  PaymentElementProps & {\n    fallback?: ReactNode;\n  }\n> = createElementComponent('payment', isServer);\n\nexport { Elements, PaymentElement, useElements, useStripe };\n","import type { StripeElement } from '@stripe/stripe-js';\nimport { useEffect, useRef } from 'react';\n\nexport const usePrevious = <T>(value: T): T => {\n  const ref = useRef(value);\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n\nexport const useAttachEvent = <A extends unknown[]>(\n  element: StripeElement | null,\n  event: string,\n  cb?: (...args: A) => any,\n) => {\n  const cbDefined = !!cb;\n  const cbRef = useRef(cb);\n\n  // In many integrations the callback prop changes on each render.\n  // Using a ref saves us from calling element.on/.off every render.\n  useEffect(() => {\n    cbRef.current = cb;\n  }, [cb]);\n\n  useEffect(() => {\n    if (!cbDefined || !element) {\n      return () => {};\n    }\n\n    const decoratedCb = (...args: A): void => {\n      if (cbRef.current) {\n        cbRef.current(...args);\n      }\n    };\n\n    (element as any).on(event, decoratedCb);\n\n    return () => {\n      (element as any).off(event, decoratedCb);\n    };\n  }, [cbDefined, event, element, cbRef]);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}