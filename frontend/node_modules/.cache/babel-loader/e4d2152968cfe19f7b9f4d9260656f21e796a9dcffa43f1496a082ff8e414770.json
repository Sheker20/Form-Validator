{"ast":null,"code":"\n\n//-------------------------------------------------\n\n// import React, { useState } from \"react\";\n// import {\n//   Box, Container, Grid, Typography, AppBar, Toolbar,\n//   IconButton, Button\n// } from \"@mui/material\";\n// import CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\n// import SaveIcon from \"@mui/icons-material/Save\";\n// import DownloadIcon from \"@mui/icons-material/Download\";\n// import FileUpload from \"./components/FileUpload\";\n// import PreviewPanel from \"./components/PreviewPanel\";\n// import ResultsPanel from \"./components/ResultsPanel\";\n// import SummaryPanel from \"./components/SummaryPanel\";\n// import axios from \"axios\";\n// import { useAuth } from \"@clerk/clerk-react\";\n\n// export default function App() {\n//   const [uploading, setUploading] = useState(false);\n//   const [documentFile, setDocumentFile] = useState(null);\n//   const [results, setResults] = useState(null);\n\n//   const { getToken } = useAuth(); // Clerk hook\n\n//   // Handle file upload with backend JWT auth\n//   async function handleFile(file) {\n//     setUploading(true);\n//     setDocumentFile(file);\n\n//     try {\n//       const token = await getToken(); // get JWT from Clerk\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n\n//       const res = await axios.post(`${import.meta.env.VITE_API_BASE_URL}/api/ocr`, formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}` // send JWT to backend\n//         },\n//       });\n\n//       console.log(\"✅ Backend Response:\", res.data);\n//       setResults(res.data);\n//     } catch (err) {\n//       console.error(\"❌ Error connecting to backend:\", err);\n//       setResults({ error: \"Backend connection failed\" });\n//     } finally {\n//       setUploading(false);\n//     }\n//   }\n\n//   // Update field manually\n//   function handleUpdateField(fieldName, newValue) {\n//     setResults((prev) => {\n//       if (!prev) return prev;\n//       return {\n//         ...prev,\n//         fields: prev.fields.map((f) =>\n//           f.field === fieldName\n//             ? {\n//                 ...f,\n//                 value: newValue,\n//                 resolvedManually: true,\n//                 status: f.status === \"error\" ? \"warn\" : f.status,\n//               }\n//             : f\n//         ),\n//       };\n//     });\n//   }\n\n//   // Export results to JSON\n//   function handleExport() {\n//     const blob = new Blob([JSON.stringify(results, null, 2)], {\n//       type: \"application/json\",\n//     });\n//     const href = URL.createObjectURL(blob);\n//     const a = document.createElement(\"a\");\n//     a.href = href;\n//     a.download = \"validated_output.json\";\n//     a.click();\n//     URL.revokeObjectURL(href);\n//   }\n\n//   return (\n//     <Box sx={{ minHeight: \"100vh\", bgcolor: \"background.default\" }}>\n//       <AppBar position=\"static\">\n//         <Toolbar>\n//           <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n//             Health Insurance Document Validator\n//           </Typography>\n//           <IconButton color=\"inherit\">\n//             <SaveIcon />\n//           </IconButton>\n//           <Button color=\"inherit\" startIcon={<DownloadIcon />} onClick={handleExport}>\n//             Export\n//           </Button>\n//         </Toolbar>\n//       </AppBar>\n\n//       <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n//         <Grid container spacing={2}>\n//           <Grid item xs={12} md={3}>\n//             <FileUpload onUpload={handleFile} uploading={uploading} />\n//             <Box mt={2}>\n//               <PreviewPanel file={documentFile} />\n//             </Box>\n//             <Box mt={2}>\n//               <Typography variant=\"caption\" color=\"text.secondary\">\n//                 Included: CMS-1500 template & validation scenarios in /assets\n//               </Typography>\n//             </Box>\n//           </Grid>\n//           <Grid item xs={12} md={6}>\n//             <ResultsPanel results={results} onUpdateField={handleUpdateField} />\n//           </Grid>\n//           <Grid item xs={12} md={3}>\n//             <SummaryPanel results={results} />\n//             <Box mt={2}>\n//               <Button variant=\"contained\" startIcon={<CloudUploadIcon />} fullWidth>\n//                 Apply Suggestions\n//               </Button>\n//             </Box>\n//           </Grid>\n//         </Grid>\n//       </Container>\n//     </Box>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/hidc project/hidc project/frontend/src/App.jsx"],"sourcesContent":["\n\n\n//-------------------------------------------------\n\n\n// import React, { useState } from \"react\";\n// import {\n//   Box, Container, Grid, Typography, AppBar, Toolbar,\n//   IconButton, Button\n// } from \"@mui/material\";\n// import CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\n// import SaveIcon from \"@mui/icons-material/Save\";\n// import DownloadIcon from \"@mui/icons-material/Download\";\n// import FileUpload from \"./components/FileUpload\";\n// import PreviewPanel from \"./components/PreviewPanel\";\n// import ResultsPanel from \"./components/ResultsPanel\";\n// import SummaryPanel from \"./components/SummaryPanel\";\n// import axios from \"axios\";\n// import { useAuth } from \"@clerk/clerk-react\";\n\n// export default function App() {\n//   const [uploading, setUploading] = useState(false);\n//   const [documentFile, setDocumentFile] = useState(null);\n//   const [results, setResults] = useState(null);\n\n//   const { getToken } = useAuth(); // Clerk hook\n\n//   // Handle file upload with backend JWT auth\n//   async function handleFile(file) {\n//     setUploading(true);\n//     setDocumentFile(file);\n\n//     try {\n//       const token = await getToken(); // get JWT from Clerk\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n\n//       const res = await axios.post(`${import.meta.env.VITE_API_BASE_URL}/api/ocr`, formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}` // send JWT to backend\n//         },\n//       });\n\n//       console.log(\"✅ Backend Response:\", res.data);\n//       setResults(res.data);\n//     } catch (err) {\n//       console.error(\"❌ Error connecting to backend:\", err);\n//       setResults({ error: \"Backend connection failed\" });\n//     } finally {\n//       setUploading(false);\n//     }\n//   }\n\n//   // Update field manually\n//   function handleUpdateField(fieldName, newValue) {\n//     setResults((prev) => {\n//       if (!prev) return prev;\n//       return {\n//         ...prev,\n//         fields: prev.fields.map((f) =>\n//           f.field === fieldName\n//             ? {\n//                 ...f,\n//                 value: newValue,\n//                 resolvedManually: true,\n//                 status: f.status === \"error\" ? \"warn\" : f.status,\n//               }\n//             : f\n//         ),\n//       };\n//     });\n//   }\n\n//   // Export results to JSON\n//   function handleExport() {\n//     const blob = new Blob([JSON.stringify(results, null, 2)], {\n//       type: \"application/json\",\n//     });\n//     const href = URL.createObjectURL(blob);\n//     const a = document.createElement(\"a\");\n//     a.href = href;\n//     a.download = \"validated_output.json\";\n//     a.click();\n//     URL.revokeObjectURL(href);\n//   }\n\n//   return (\n//     <Box sx={{ minHeight: \"100vh\", bgcolor: \"background.default\" }}>\n//       <AppBar position=\"static\">\n//         <Toolbar>\n//           <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n//             Health Insurance Document Validator\n//           </Typography>\n//           <IconButton color=\"inherit\">\n//             <SaveIcon />\n//           </IconButton>\n//           <Button color=\"inherit\" startIcon={<DownloadIcon />} onClick={handleExport}>\n//             Export\n//           </Button>\n//         </Toolbar>\n//       </AppBar>\n\n//       <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n//         <Grid container spacing={2}>\n//           <Grid item xs={12} md={3}>\n//             <FileUpload onUpload={handleFile} uploading={uploading} />\n//             <Box mt={2}>\n//               <PreviewPanel file={documentFile} />\n//             </Box>\n//             <Box mt={2}>\n//               <Typography variant=\"caption\" color=\"text.secondary\">\n//                 Included: CMS-1500 template & validation scenarios in /assets\n//               </Typography>\n//             </Box>\n//           </Grid>\n//           <Grid item xs={12} md={6}>\n//             <ResultsPanel results={results} onUpdateField={handleUpdateField} />\n//           </Grid>\n//           <Grid item xs={12} md={3}>\n//             <SummaryPanel results={results} />\n//             <Box mt={2}>\n//               <Button variant=\"contained\" startIcon={<CloudUploadIcon />} fullWidth>\n//                 Apply Suggestions\n//               </Button>\n//             </Box>\n//           </Grid>\n//         </Grid>\n//       </Container>\n//     </Box>\n//   );\n// }\n"],"mappings":";;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}